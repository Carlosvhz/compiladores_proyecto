
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import org.json.simple.*;
import com.google.gson.*;
import AST.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\004\000\002\003\002\000\002\003\004" +
    "\000\002\004\005\000\002\004\007\000\002\004\010\000" +
    "\002\004\010\000\002\004\007\000\002\004\011\000\002" +
    "\037\005\000\002\037\003\000\002\037\007\000\002\037" +
    "\005\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\004\000\002\005\004\000" +
    "\002\006\006\000\002\010\004\000\002\010\002\000\002" +
    "\011\005\000\002\011\007\000\002\011\007\000\002\011" +
    "\011\000\002\014\004\000\002\014\002\000\002\015\003" +
    "\000\002\015\003\000\002\015\004\000\002\022\011\000" +
    "\002\022\004\000\002\022\003\000\002\022\007\000\002" +
    "\022\007\000\002\022\012\000\002\022\007\000\002\022" +
    "\005\000\002\022\003\000\002\023\007\000\002\023\011" +
    "\000\002\024\005\000\002\024\003\000\002\025\005\000" +
    "\002\025\003\000\002\026\005\000\002\026\003\000\002" +
    "\027\005\000\002\027\005\000\002\027\003\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\003\000\002\031\005\000\002\031\005\000" +
    "\002\031\003\000\002\032\005\000\002\032\005\000\002" +
    "\032\003\000\002\033\004\000\002\033\004\000\002\033" +
    "\003\000\002\034\011\000\002\035\003\000\002\036\005" +
    "\000\002\036\003\000\002\036\004\000\002\036\004\000" +
    "\002\036\003\000\002\036\003\000\002\036\006\000\002" +
    "\036\004\000\002\036\004\000\002\012\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\013\003\000\002\013\002\000" +
    "\002\016\005\000\002\016\003\000\002\017\004\000\002" +
    "\020\003\000\002\020\002\000\002\021\005\000\002\021" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\016\002\ufffd\003\006\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\001\002\000\014\002\000\034\015\035\016" +
    "\036\012\037\014\001\002\000\004\002\010\001\002\000" +
    "\006\002\uffff\011\007\001\002\000\014\002\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\001\002\000\004\002\001\001" +
    "\002\000\014\002\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe" +
    "\001\002\000\004\053\uffee\001\002\000\004\053\022\001" +
    "\002\000\004\053\ufff1\001\002\000\006\015\020\053\ufff0" +
    "\001\002\000\006\015\017\053\uffef\001\002\000\004\053" +
    "\uffec\001\002\000\004\053\uffed\001\002\000\012\004\025" +
    "\010\023\011\024\031\026\001\002\000\052\004\uffb2\005" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\046\uffb2\047\uffb2\001\002" +
    "\000\004\053\022\001\002\000\014\002\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\037\ufffb\001\002\000\014\005\uffab\034\015" +
    "\035\016\036\012\037\014\001\002\000\030\004\035\014" +
    "\040\015\032\017\043\020\033\032\051\033\034\050\050" +
    "\051\045\052\042\053\022\001\002\000\040\005\uffbe\010" +
    "\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030" +
    "\uffbe\001\002\000\020\005\uffcf\010\uffcf\011\uffcf\021\uffcf" +
    "\022\uffcf\023\075\024\076\001\002\000\006\010\134\011" +
    "\135\001\002\000\004\053\022\001\002\000\030\004\035" +
    "\014\040\015\032\017\043\020\033\032\051\033\034\050" +
    "\050\051\045\052\042\053\022\001\002\000\042\005\uffae" +
    "\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016" +
    "\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae" +
    "\027\uffae\030\uffae\001\002\000\030\004\035\014\040\015" +
    "\032\017\043\020\033\032\051\033\034\050\050\051\045" +
    "\052\042\053\022\001\002\000\030\005\uffcc\010\uffcc\011" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\102\026\100" +
    "\027\103\030\101\001\002\000\050\004\063\005\uffba\010" +
    "\uffba\011\uffba\013\uffba\014\uffba\015\uffba\016\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\121\046\062\047\061\001\002\000\030\004\035" +
    "\014\040\015\032\017\043\020\033\032\051\033\034\050" +
    "\050\051\045\052\042\053\022\001\002\000\034\005\uffc7" +
    "\010\uffc7\011\uffc7\013\106\014\105\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\001\002" +
    "\000\042\005\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\001\002\000\004\053" +
    "\022\001\002\000\040\005\uffc1\010\uffc1\011\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\016\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\001\002\000\042" +
    "\005\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\001\002\000\012\005\uffd3\010" +
    "\uffd3\011\uffd3\022\115\001\002\000\042\005\uffb6\010\uffb6" +
    "\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\001\002\000\042\005\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\001" +
    "\002\000\042\005\uffad\010\uffad\011\uffad\012\uffad\013\uffad" +
    "\014\uffad\015\uffad\016\uffad\021\uffad\022\uffad\023\uffad\024" +
    "\uffad\025\uffad\026\uffad\027\uffad\030\uffad\001\002\000\014" +
    "\005\uffd1\010\uffd1\011\uffd1\021\073\022\uffd1\001\002\000" +
    "\040\005\uffc4\010\uffc4\011\uffc4\013\uffc4\014\uffc4\015\055" +
    "\016\056\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\001\002\000\042\005\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\001\002\000\030\004\035\014\040\015\032\017" +
    "\043\020\033\032\051\033\034\050\050\051\045\052\042" +
    "\053\022\001\002\000\030\004\035\014\040\015\032\017" +
    "\043\020\033\032\051\033\034\050\050\051\045\052\042" +
    "\053\022\001\002\000\050\004\063\005\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\046\062\047\061\001\002\000\040\005\uffc2\010\uffc2" +
    "\011\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\001\002\000\042\005\uffb3\010\uffb3\011\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\001\002\000" +
    "\042\005\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\001\002\000\032\004\035" +
    "\005\uffa6\014\040\015\032\017\043\020\033\032\051\033" +
    "\034\050\050\051\045\052\042\053\022\001\002\000\006" +
    "\005\uffa4\010\uffa4\001\002\000\004\005\071\001\002\000" +
    "\006\005\uffa7\010\067\001\002\000\030\004\035\014\040" +
    "\015\032\017\043\020\033\032\051\033\034\050\050\051" +
    "\045\052\042\053\022\001\002\000\006\005\uffa5\010\uffa5" +
    "\001\002\000\042\005\uffb5\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\001\002\000" +
    "\040\005\uffc3\010\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\001\002\000\030\004\035\014\040" +
    "\015\032\017\043\020\033\032\051\033\034\050\050\051" +
    "\045\052\042\053\022\001\002\000\020\005\uffd0\010\uffd0" +
    "\011\uffd0\021\uffd0\022\uffd0\023\075\024\076\001\002\000" +
    "\030\004\035\014\040\015\032\017\043\020\033\032\051" +
    "\033\034\050\050\051\045\052\042\053\022\001\002\000" +
    "\030\004\035\014\040\015\032\017\043\020\033\032\051" +
    "\033\034\050\050\051\045\052\042\053\022\001\002\000" +
    "\030\005\uffcd\010\uffcd\011\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\102\026\100\027\103\030\101\001\002\000" +
    "\030\004\035\014\040\015\032\017\043\020\033\032\051" +
    "\033\034\050\050\051\045\052\042\053\022\001\002\000" +
    "\030\004\035\014\040\015\032\017\043\020\033\032\051" +
    "\033\034\050\050\051\045\052\042\053\022\001\002\000" +
    "\030\004\035\014\040\015\032\017\043\020\033\032\051" +
    "\033\034\050\050\051\045\052\042\053\022\001\002\000" +
    "\030\004\035\014\040\015\032\017\043\020\033\032\051" +
    "\033\034\050\050\051\045\052\042\053\022\001\002\000" +
    "\034\005\uffc8\010\uffc8\011\uffc8\013\106\014\105\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\001\002\000\030\004\035\014\040\015\032\017\043" +
    "\020\033\032\051\033\034\050\050\051\045\052\042\053" +
    "\022\001\002\000\030\004\035\014\040\015\032\017\043" +
    "\020\033\032\051\033\034\050\050\051\045\052\042\053" +
    "\022\001\002\000\040\005\uffc6\010\uffc6\011\uffc6\013\uffc6" +
    "\014\uffc6\015\055\016\056\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\001\002\000\040" +
    "\005\uffc5\010\uffc5\011\uffc5\013\uffc5\014\uffc5\015\055\016" +
    "\056\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\001\002\000\034\005\uffc9\010\uffc9\011" +
    "\uffc9\013\106\014\105\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\001\002\000\034\005" +
    "\uffca\010\uffca\011\uffca\013\106\014\105\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\001" +
    "\002\000\034\005\uffcb\010\uffcb\011\uffcb\013\106\014\105" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\001\002\000\030\005\uffce\010\uffce\011\uffce" +
    "\021\uffce\022\uffce\023\uffce\024\uffce\025\102\026\100\027" +
    "\103\030\101\001\002\000\030\004\035\014\040\015\032" +
    "\017\043\020\033\032\051\033\034\050\050\051\045\052" +
    "\042\053\022\001\002\000\014\005\uffd2\010\uffd2\011\uffd2" +
    "\021\073\022\uffd2\001\002\000\042\005\uffb8\010\uffb8\011" +
    "\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\001\002\000\040\005\uffbf\010\uffbf\011\uffbf\013\uffbf" +
    "\014\uffbf\015\uffbf\016\uffbf\021\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\001\002\000\030" +
    "\004\035\014\040\015\032\017\043\020\033\032\051\033" +
    "\034\050\050\051\045\052\042\053\022\001\002\000\010" +
    "\005\uffd4\010\uffd4\011\uffd4\001\002\000\004\005\124\001" +
    "\002\000\044\005\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\016\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\056\125\001\002" +
    "\000\024\004\035\015\032\017\043\032\051\033\034\050" +
    "\050\051\045\052\042\053\022\001\002\000\004\012\127" +
    "\001\002\000\024\004\035\015\032\017\043\032\051\033" +
    "\034\050\050\051\045\052\042\053\022\001\002\000\042" +
    "\005\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\001\002\000\042\005\uffbc\010" +
    "\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc" +
    "\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\001\002\000\040\005\uffc0\010\uffc0\011\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\016\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\001\002" +
    "\000\042\005\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\001\002\000\004\053" +
    "\022\001\002\000\014\002\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\001\002\000\006\010\142\011\143\001\002\000" +
    "\010\010\ufff4\011\ufff4\031\140\001\002\000\030\004\035" +
    "\014\040\015\032\017\043\020\033\032\051\033\034\050" +
    "\050\051\045\052\042\053\022\001\002\000\006\010\ufff2" +
    "\011\ufff2\001\002\000\004\053\022\001\002\000\014\002" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\001\002\000\010" +
    "\010\ufff5\011\ufff5\031\145\001\002\000\030\004\035\014" +
    "\040\015\032\017\043\020\033\032\051\033\034\050\050" +
    "\051\045\052\042\053\022\001\002\000\006\010\ufff3\011" +
    "\ufff3\001\002\000\004\005\156\001\002\000\006\005\uffac" +
    "\010\154\001\002\000\004\053\153\001\002\000\006\005" +
    "\uffa9\010\uffa9\001\002\000\006\005\uffa8\010\uffa8\001\002" +
    "\000\012\034\015\035\016\036\012\037\014\001\002\000" +
    "\006\005\uffaa\010\uffaa\001\002\000\006\006\157\011\160" +
    "\001\002\000\062\003\uffe9\004\uffe9\006\uffe9\007\uffe9\014" +
    "\uffe9\015\uffe9\017\uffe9\020\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\043\uffe9\044" +
    "\uffe9\045\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\055\uffe9" +
    "\001\002\000\014\002\ufff8\034\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\001\002\000\014\002\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\001\002\000\062\003\uffe3\004\uffe3\006\uffe3\007" +
    "\uffe3\014\uffe3\015\uffe3\017\uffe3\020\uffe3\032\uffe3\033\uffe3" +
    "\034\015\035\016\036\012\037\014\040\uffe3\041\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3" +
    "\055\uffe3\001\002\000\062\003\uffea\004\uffea\006\uffea\007" +
    "\uffea\014\uffea\015\uffea\017\uffea\020\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\043" +
    "\uffea\044\uffea\045\uffea\050\uffea\051\uffea\052\uffea\053\uffea" +
    "\055\uffea\001\002\000\004\053\022\001\002\000\052\003" +
    "\174\004\035\006\157\007\177\014\040\015\032\017\043" +
    "\020\033\032\051\033\034\040\201\041\172\043\175\044" +
    "\173\045\167\050\050\051\045\052\042\053\022\055\170" +
    "\001\002\000\054\003\uffdd\004\uffdd\006\uffdd\007\uffdd\014" +
    "\uffdd\015\uffdd\017\uffdd\020\uffdd\032\uffdd\033\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\050\uffdd\051" +
    "\uffdd\052\uffdd\053\uffdd\055\uffdd\001\002\000\004\004\242" +
    "\001\002\000\004\004\236\001\002\000\052\003\uffe2\004" +
    "\uffe2\006\uffe2\007\uffe2\014\uffe2\015\uffe2\017\uffe2\020\uffe2" +
    "\032\uffe2\033\uffe2\040\uffe2\041\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\055\uffe2\001\002" +
    "\000\004\004\227\001\002\000\030\004\035\014\040\015" +
    "\032\017\043\020\033\032\051\033\034\050\050\051\045" +
    "\052\042\053\022\001\002\000\056\003\uffd7\004\uffd7\006" +
    "\uffd7\007\uffd7\011\224\014\uffd7\015\uffd7\017\uffd7\020\uffd7" +
    "\032\uffd7\033\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\055\uffd7" +
    "\001\002\000\004\004\210\001\002\000\052\003\uffe1\004" +
    "\uffe1\006\uffe1\007\uffe1\014\uffe1\015\uffe1\017\uffe1\020\uffe1" +
    "\032\uffe1\033\uffe1\040\uffe1\041\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\055\uffe1\001\002" +
    "\000\066\002\uffeb\003\uffeb\004\uffeb\006\uffeb\007\uffeb\014" +
    "\uffeb\015\uffeb\017\uffeb\020\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043" +
    "\uffeb\044\uffeb\045\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb" +
    "\055\uffeb\001\002\000\004\011\207\001\002\000\004\004" +
    "\203\001\002\000\052\003\uffe4\004\uffe4\006\uffe4\007\uffe4" +
    "\014\uffe4\015\uffe4\017\uffe4\020\uffe4\032\uffe4\033\uffe4\040" +
    "\uffe4\041\uffe4\043\uffe4\044\uffe4\045\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\055\uffe4\001\002\000\032\004\035\005" +
    "\uffa6\014\040\015\032\017\043\020\033\032\051\033\034" +
    "\050\050\051\045\052\042\053\022\001\002\000\004\005" +
    "\205\001\002\000\004\011\206\001\002\000\054\003\uffdc" +
    "\004\uffdc\006\uffdc\007\uffdc\014\uffdc\015\uffdc\017\uffdc\020" +
    "\uffdc\032\uffdc\033\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\055" +
    "\uffdc\001\002\000\054\003\uffde\004\uffde\006\uffde\007\uffde" +
    "\014\uffde\015\uffde\017\uffde\020\uffde\032\uffde\033\uffde\040" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\050\uffde" +
    "\051\uffde\052\uffde\053\uffde\055\uffde\001\002\000\030\004" +
    "\035\014\040\015\032\017\043\020\033\032\051\033\034" +
    "\050\050\051\045\052\042\053\022\001\002\000\004\005" +
    "\212\001\002\000\050\003\215\004\035\006\157\014\040" +
    "\015\032\017\043\020\033\032\051\033\034\040\201\041" +
    "\213\043\175\044\173\045\167\050\050\051\045\052\042" +
    "\053\022\055\170\001\002\000\004\004\216\001\002\000" +
    "\054\003\uffd9\004\uffd9\006\uffd9\007\uffd9\014\uffd9\015\uffd9" +
    "\017\uffd9\020\uffd9\032\uffd9\033\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\055\uffd9\001\002\000\054\003\uffd7\004\uffd7\006" +
    "\uffd7\007\uffd7\014\uffd7\015\uffd7\017\uffd7\020\uffd7\032\uffd7" +
    "\033\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\055\uffd7\001\002" +
    "\000\030\004\035\014\040\015\032\017\043\020\033\032" +
    "\051\033\034\050\050\051\045\052\042\053\022\001\002" +
    "\000\004\005\220\001\002\000\050\003\215\004\035\006" +
    "\157\014\040\015\032\017\043\020\033\032\051\033\034" +
    "\040\201\041\213\043\175\044\173\045\167\050\050\051" +
    "\045\052\042\053\022\055\170\001\002\000\004\042\222" +
    "\001\002\000\050\003\215\004\035\006\157\014\040\015" +
    "\032\017\043\020\033\032\051\033\034\040\201\041\213" +
    "\043\175\044\173\045\167\050\050\051\045\052\042\053" +
    "\022\055\170\001\002\000\054\003\uffdf\004\uffdf\006\uffdf" +
    "\007\uffdf\014\uffdf\015\uffdf\017\uffdf\020\uffdf\032\uffdf\033" +
    "\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\050\uffdf\051\uffdf\052\uffdf\053\uffdf\055\uffdf\001\002\000" +
    "\052\003\uffe0\004\uffe0\006\uffe0\007\uffe0\014\uffe0\015\uffe0" +
    "\017\uffe0\020\uffe0\032\uffe0\033\uffe0\040\uffe0\041\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0" +
    "\055\uffe0\001\002\000\004\011\226\001\002\000\054\003" +
    "\uffd8\004\uffd8\006\uffd8\007\uffd8\014\uffd8\015\uffd8\017\uffd8" +
    "\020\uffd8\032\uffd8\033\uffd8\040\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\055\uffd8\001\002\000\030\004\035\014\040\015\032\017" +
    "\043\020\033\032\051\033\034\050\050\051\045\052\042" +
    "\053\022\001\002\000\004\005\231\001\002\000\050\003" +
    "\174\004\035\006\157\014\040\015\032\017\043\020\033" +
    "\032\051\033\034\040\201\041\172\043\175\044\173\045" +
    "\167\050\050\051\045\052\042\053\022\055\170\001\002" +
    "\000\054\003\uffe2\004\uffe2\006\uffe2\007\uffe2\014\uffe2\015" +
    "\uffe2\017\uffe2\020\uffe2\032\uffe2\033\uffe2\040\uffe2\041\uffe2" +
    "\042\234\043\uffe2\044\uffe2\045\uffe2\050\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\055\uffe2\001\002\000\052\003\uffd6\004\uffd6" +
    "\006\uffd6\007\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6\032" +
    "\uffd6\033\uffd6\040\uffd6\041\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\050\uffd6\051\uffd6\052\uffd6\053\uffd6\055\uffd6\001\002\000" +
    "\050\003\215\004\035\006\157\014\040\015\032\017\043" +
    "\020\033\032\051\033\034\040\201\041\172\043\175\044" +
    "\173\045\167\050\050\051\045\052\042\053\022\055\170" +
    "\001\002\000\052\003\uffd5\004\uffd5\006\uffd5\007\uffd5\014" +
    "\uffd5\015\uffd5\017\uffd5\020\uffd5\032\uffd5\033\uffd5\040\uffd5" +
    "\041\uffd5\043\uffd5\044\uffd5\045\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\055\uffd5\001\002\000\032\004\035\005\uffa6" +
    "\014\040\015\032\017\043\020\033\032\051\033\034\050" +
    "\050\051\045\052\042\053\022\001\002\000\004\005\240" +
    "\001\002\000\004\011\241\001\002\000\054\003\uffdb\004" +
    "\uffdb\006\uffdb\007\uffdb\014\uffdb\015\uffdb\017\uffdb\020\uffdb" +
    "\032\uffdb\033\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044" +
    "\uffdb\045\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\055\uffdb" +
    "\001\002\000\040\004\uffe9\014\uffe9\015\uffe9\017\uffe9\020" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\053\uffe9\001\002\000\040\004" +
    "\035\014\040\015\032\017\043\020\033\032\051\033\034" +
    "\034\015\035\016\036\012\037\014\050\050\051\045\052" +
    "\042\053\022\001\002\000\004\011\245\001\002\000\030" +
    "\004\035\014\040\015\032\017\043\020\033\032\051\033" +
    "\034\050\050\051\045\052\042\053\022\001\002\000\004" +
    "\005\247\001\002\000\050\003\215\004\035\006\157\014" +
    "\040\015\032\017\043\020\033\032\051\033\034\040\201" +
    "\041\213\043\175\044\173\045\167\050\050\051\045\052" +
    "\042\053\022\055\170\001\002\000\054\003\uffda\004\uffda" +
    "\006\uffda\007\uffda\014\uffda\015\uffda\017\uffda\020\uffda\032" +
    "\uffda\033\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\uffda\050\uffda\051\uffda\052\uffda\053\uffda\055\uffda\001" +
    "\002\000\010\010\252\011\253\031\254\001\002\000\004" +
    "\053\022\001\002\000\062\003\uffe8\004\uffe8\006\uffe8\007" +
    "\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\043" +
    "\uffe8\044\uffe8\045\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\055\uffe8\001\002\000\030\004\035\014\040\015\032\017" +
    "\043\020\033\032\051\033\034\050\050\051\045\052\042" +
    "\053\022\001\002\000\006\010\256\011\257\001\002\000" +
    "\004\053\022\001\002\000\062\003\uffe7\004\uffe7\006\uffe7" +
    "\007\uffe7\014\uffe7\015\uffe7\017\uffe7\020\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\050\uffe7\051\uffe7\052\uffe7\053" +
    "\uffe7\055\uffe7\001\002\000\006\010\142\011\261\001\002" +
    "\000\062\003\uffe5\004\uffe5\006\uffe5\007\uffe5\014\uffe5\015" +
    "\uffe5\017\uffe5\020\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\045" +
    "\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\055\uffe5\001\002" +
    "\000\006\010\142\011\263\001\002\000\062\003\uffe6\004" +
    "\uffe6\006\uffe6\007\uffe6\014\uffe6\015\uffe6\017\uffe6\020\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\043\uffe6\044\uffe6\045\uffe6\050\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\055\uffe6\001\002\000\006\010\142\011" +
    "\265\001\002\000\014\002\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\037\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\006\002\004\003\003\001\001\000\006\004" +
    "\010\005\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\136\037\263\001\001\000\002\001\001\000\012\005" +
    "\150\013\146\016\147\017\151\001\001\000\032\007\053" +
    "\012\036\024\030\025\045\026\051\027\027\030\035\031" +
    "\040\032\052\033\043\034\046\036\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\132\001\001\000\014\007\053\012\056\033\131\034\046" +
    "\036\026\001\001\000\002\001\001\000\032\007\053\012" +
    "\036\024\122\025\045\026\051\027\027\030\035\031\040" +
    "\032\052\033\043\034\046\036\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\053\012\056\033\117" +
    "\034\046\036\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\053\012\056\033\071\034" +
    "\046\036\026\001\001\000\014\007\053\012\056\033\057" +
    "\034\046\036\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\007\053" +
    "\012\036\020\064\021\065\024\063\025\045\026\051\027" +
    "\027\030\035\031\040\032\052\033\043\034\046\036\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\007\053\012\036\024\067\025\045\026\051" +
    "\027\027\030\035\031\040\032\052\033\043\034\046\036" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\007\053\012\056\027\073\030\035\031" +
    "\040\032\052\033\043\034\046\036\026\001\001\000\002" +
    "\001\001\000\022\007\053\012\056\030\113\031\040\032" +
    "\052\033\043\034\046\036\026\001\001\000\022\007\053" +
    "\012\056\030\076\031\040\032\052\033\043\034\046\036" +
    "\026\001\001\000\002\001\001\000\020\007\053\012\056" +
    "\031\112\032\052\033\043\034\046\036\026\001\001\000" +
    "\020\007\053\012\056\031\111\032\052\033\043\034\046" +
    "\036\026\001\001\000\020\007\053\012\056\031\110\032" +
    "\052\033\043\034\046\036\026\001\001\000\020\007\053" +
    "\012\056\031\103\032\052\033\043\034\046\036\026\001" +
    "\001\000\002\001\001\000\016\007\053\012\056\032\107" +
    "\033\043\034\046\036\026\001\001\000\016\007\053\012" +
    "\056\032\106\033\043\034\046\036\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\053" +
    "\012\056\026\115\027\027\030\035\031\040\032\052\033" +
    "\043\034\046\036\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\053\012\036\024" +
    "\121\025\045\026\051\027\027\030\035\031\040\032\052" +
    "\033\043\034\046\036\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\053\012\056" +
    "\034\046\036\125\001\001\000\002\001\001\000\014\007" +
    "\053\012\056\034\046\035\127\036\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\136\037\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\007\053\012" +
    "\036\024\140\025\045\026\051\027\027\030\035\031\040" +
    "\032\052\033\043\034\046\036\026\001\001\000\002\001" +
    "\001\000\004\012\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\053\012\036\024\145\025\045\026" +
    "\051\027\027\030\035\031\040\032\052\033\043\034\046" +
    "\036\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\150\017\154\001\001\000\002\001" +
    "\001\000\004\006\160\001\001\000\004\010\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\163\011" +
    "\162\014\164\001\001\000\002\001\001\000\004\012\250" +
    "\001\001\000\042\006\165\007\053\012\036\015\201\022" +
    "\170\023\175\024\177\025\045\026\051\027\027\030\035" +
    "\031\040\032\052\033\043\034\046\036\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\053\012\036\024" +
    "\224\025\045\026\051\027\027\030\035\031\040\032\052" +
    "\033\043\034\046\036\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\007" +
    "\053\012\036\020\203\021\065\024\063\025\045\026\051" +
    "\027\027\030\035\031\040\032\052\033\043\034\046\036" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\053\012\036\024" +
    "\210\025\045\026\051\027\027\030\035\031\040\032\052" +
    "\033\043\034\046\036\026\001\001\000\002\001\001\000" +
    "\036\006\165\007\053\012\036\022\213\024\177\025\045" +
    "\026\051\027\027\030\035\031\040\032\052\033\043\034" +
    "\046\036\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\007\053\012\036\024\216\025" +
    "\045\026\051\027\027\030\035\031\040\032\052\033\043" +
    "\034\046\036\026\001\001\000\002\001\001\000\036\006" +
    "\165\007\053\012\036\022\220\024\177\025\045\026\051" +
    "\027\027\030\035\031\040\032\052\033\043\034\046\036" +
    "\026\001\001\000\002\001\001\000\036\006\165\007\053" +
    "\012\036\022\222\024\177\025\045\026\051\027\027\030" +
    "\035\031\040\032\052\033\043\034\046\036\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\007\053\012\036\024\227\025\045" +
    "\026\051\027\027\030\035\031\040\032\052\033\043\034" +
    "\046\036\026\001\001\000\002\001\001\000\042\006\165" +
    "\007\053\012\036\015\232\022\231\023\175\024\177\025" +
    "\045\026\051\027\027\030\035\031\040\032\052\033\043" +
    "\034\046\036\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\006\165\007\053\012\036\022\222\023\234" +
    "\024\177\025\045\026\051\027\027\030\035\031\040\032" +
    "\052\033\043\034\046\036\026\001\001\000\002\001\001" +
    "\000\036\007\053\012\036\020\236\021\065\024\063\025" +
    "\045\026\051\027\027\030\035\031\040\032\052\033\043" +
    "\034\046\036\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\242\001\001\000\036" +
    "\005\163\007\053\011\162\012\036\024\243\025\045\026" +
    "\051\027\027\030\035\031\040\032\052\033\043\034\046" +
    "\036\026\001\001\000\002\001\001\000\032\007\053\012" +
    "\036\024\245\025\045\026\051\027\027\030\035\031\040" +
    "\032\052\033\043\034\046\036\026\001\001\000\002\001" +
    "\001\000\036\006\165\007\053\012\036\022\247\024\177" +
    "\025\045\026\051\027\027\030\035\031\040\032\052\033" +
    "\043\034\046\036\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\136\037\261\001\001\000\002\001" +
    "\001\000\032\007\053\012\036\024\254\025\045\026\051" +
    "\027\027\030\035\031\040\032\052\033\043\034\046\036" +
    "\026\001\001\000\002\001\001\000\006\012\136\037\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Symbol symbol;
    public JSONObject program_json = new JSONObject();
    private ArrayList<String> errors = new ArrayList<>();

    private boolean debug = true;

    public void unrecovered_syntax_error(Symbol cur_token){
        String error = "Se esperaba uno de los siguientes tokens },) \n";
        if(!errors.contains(error)){
            errors.add(error); 
        }
    }

    public void syntax_error(Symbol s){
        String error = "";
        if(s.value != null){
            error = "Error Sintáctico en la Línea " + (s.left+1) +
            " Columna "+s.right+ ". No se esperaba este componente: " +s.value + "\n";
        }else{
            error = "Se esperaba uno de los siguientes tokens },) \n";
        }
        errors.add(error);
    }

    public ArrayList<String> getErrors(){
        return errors;
    }

    public String print(JSONObject item){
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        JsonParser jp = new JsonParser();
        JsonElement je = jp.parse(item.toString());
        String prettyJsonString = gson.toJson(je);
        return prettyJsonString;
    }

    public Symbol getSymbol(){
        return symbol;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= edecl_list 
            {
              Object RESULT =null;
		int LISTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int LISTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object LIST = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        program_json = new JSONObject();
        program_json.put("declarations", LIST);
        RESULT = program_json;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // edecl_list ::= edecl_list edecl 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(LEFT instanceof ArrayList){
            ArrayList declarations =  (ArrayList) LEFT;
            declarations.add(RIGHT);
            RESULT = declarations;
        }else{
            ArrayList declarations = new ArrayList();
            declarations.add(RIGHT);
            RESULT = declarations;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("edecl_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // edecl_list ::= 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("edecl_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // edecl_list ::= error SEMI 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("edecl_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // edecl ::= type_spec name_expr SEMI 
            {
              Object RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new Declaration(NAME, TYPE);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("edecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // edecl ::= type_spec name_expr ASSIGN expr SEMI 
            {
              Object RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression VALUE = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new Declaration(NAME, TYPE);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("edecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // edecl ::= type_spec name_expr LPAREN opt_param_list RPAREN block 
            {
              Object RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int PARAMSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int PARAMSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList PARAMS = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int BODYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int BODYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block BODY = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Function func = new Function(NAME, TYPE);
        if(PARAMS!=null){
            func.setParameters(PARAMS);
        }
        if(BODY!=null){
            func.setBody(BODY);
        }
        
        RESULT = func;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("edecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // edecl ::= type_spec name_expr LPAREN opt_param_list RPAREN SEMI 
            {
              Object RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int PARAMSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int PARAMSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList PARAMS = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        Function func = new Function(NAME, TYPE);
        if(PARAMS!=null){
            func.setParameters(PARAMS);
        }
        
        RESULT = func;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("edecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // edecl ::= type_spec name_expr COMMA single_decl_list SEMI 
            {
              Object RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int LISTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int LISTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object LIST = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Declaration(NAME, TYPE);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("edecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // edecl ::= type_spec name_expr ASSIGN expr COMMA single_decl_list SEMI 
            {
              Object RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression VALUE = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int LISTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int LISTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object LIST = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Declaration(NAME, TYPE);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("edecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // single_decl_list ::= single_decl_list COMMA name_expr 
            {
              Object RESULT =null;
		int LISTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LISTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object LIST = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(NAME);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_decl_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // single_decl_list ::= name_expr 
            {
              Object RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
       RESULT = new Declaration(NAME);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_decl_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // single_decl_list ::= single_decl_list COMMA name_expr ASSIGN expr 
            {
              Object RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression VALUE = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new Declaration(NAME); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_decl_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // single_decl_list ::= name_expr ASSIGN expr 
            {
              Object RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression VALUE = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(NAME); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_decl_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_spec ::= BOOLEAN 
            {
              String RESULT =null;
		 RESULT = "boolean"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_spec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type_spec ::= CHAR 
            {
              String RESULT =null;
		
        RESULT = "char";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_spec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_spec ::= INT 
            {
              String RESULT =null;
		
        RESULT = "int";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_spec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_spec ::= STRING 
            {
              String RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_spec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_spec ::= CHAR STAR 
            {
              String RESULT =null;
		
        RESULT = "char*";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_spec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_spec ::= INT STAR 
            {
              String RESULT =null;
		
        RESULT = "int*";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_spec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // block ::= LBRACE decl_list stmt_list RBRACE 
            {
              Block RESULT =null;
		int DECLSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int DECLSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList DECLS = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int STMTSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int STMTSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList STMTS = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	Block body  = new Block();
        if(DECLS != null){
            body.setDeclarations(DECLS);
	}

	if(STMTS != null){
            body.setStatements(STMTS);
	}
	RESULT = body;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decl_list ::= decl_list decl 
            {
              ArrayList RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList LEFT = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration RIGHT = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(LEFT instanceof ArrayList){
            ArrayList declarations =  (ArrayList) LEFT;
            declarations.add(RIGHT);
            RESULT = declarations;
        }else{
            ArrayList declarations = new ArrayList();
            declarations.add(RIGHT);
            RESULT = declarations;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decl_list ::= 
            {
              ArrayList RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // decl ::= type_spec name_expr SEMI 
            {
              Declaration RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Declaration param  = new Declaration(NAME, TYPE);
        RESULT = param;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decl ::= type_spec name_expr ASSIGN expr SEMI 
            {
              Declaration RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression VALUE = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	Declaration param  = new Declaration(NAME, TYPE);
	RESULT = param;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decl ::= type_spec name_expr COMMA single_decl_list SEMI 
            {
              Declaration RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int LISTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int LISTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object LIST = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Declaration(NAME, TYPE);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // decl ::= type_spec name_expr ASSIGN expr COMMA single_decl_list SEMI 
            {
              Declaration RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression VALUE = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int LISTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int LISTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object LIST = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new Declaration(NAME, TYPE);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt_list ::= stmt_list stmt 
            {
              ArrayList RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList LEFT = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement RIGHT = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(LEFT instanceof ArrayList){
            ArrayList statements =  (ArrayList) LEFT;
            statements.add(RIGHT);
            RESULT = statements;
        }else{
            ArrayList statements = new ArrayList();
            statements.add(RIGHT);
            RESULT = statements; 
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt_list ::= 
            {
              ArrayList RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= matched_stmt 
            {
              Statement RESULT =null;
		int STMTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int STMTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement STMT = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = STMT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= unmatched_stmt 
            {
              Statement RESULT =null;
		int STMTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int STMTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement STMT = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = STMT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= error SEMI 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // matched_stmt ::= IF LPAREN expr RPAREN matched_stmt ELSE matched_stmt 
            {
              Statement RESULT =null;
		int CONDITIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int CONDITIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression CONDITION = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int IFCLAUSEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int IFCLAUSEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement IFCLAUSE = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ELSECLAUSEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ELSECLAUSEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement ELSECLAUSE = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(CONDITION, IFCLAUSE, ELSECLAUSE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // matched_stmt ::= expr SEMI 
            {
              Statement RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression EXPR = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = EXPR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // matched_stmt ::= block 
            {
              Statement RESULT =null;
		int BLOCKleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int BLOCKright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block BLOCK = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT  = BLOCK;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // matched_stmt ::= PRINT LPAREN opt_arg_list RPAREN SEMI 
            {
              Statement RESULT =null;
		int ARGSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ARGSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList ARGS = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
        Printf print = new Printf(); 
        if(ARGS != null){
        
            print.setArguments(ARGS);
        }
        RESULT = print;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // matched_stmt ::= SCAN LPAREN opt_arg_list RPAREN SEMI 
            {
              Statement RESULT =null;
		int ARGSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ARGSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList ARGS = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
        Scanf scan = new Scanf(); 
        if(ARGS != null){
            scan.setArguments(ARGS);
        }
        RESULT = scan;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // matched_stmt ::= FOR LPAREN decl_list expr SEMI expr RPAREN matched_stmt 
            {
              Statement RESULT =null;
		int LISTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int LISTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList LIST = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int CONDITIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int CONDITIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression CONDITION = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ITERATIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ITERATIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression ITERATION = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int BODYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int BODYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement BODY = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	For forexp = new For(CONDITION, ITERATION, BODY);
        forexp.setDeclaration(LIST);
	RESULT = forexp;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // matched_stmt ::= WHILE LPAREN expr RPAREN matched_stmt 
            {
              Statement RESULT =null;
		int CONDITIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int CONDITIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression CONDITION = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int BODYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int BODYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement BODY = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new While(CONDITION, BODY);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // matched_stmt ::= RETURN expr SEMI 
            {
              Statement RESULT =null;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression VALUE = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(VALUE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // matched_stmt ::= error 
            {
              Statement RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unmatched_stmt ::= IF LPAREN expr RPAREN stmt 
            {
              Statement RESULT =null;
		int CONDITIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int CONDITIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression CONDITION = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int IFCLAUSEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IFCLAUSEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement IFCLAUSE = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(CONDITION, IFCLAUSE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unmatched_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unmatched_stmt ::= IF LPAREN expr RPAREN matched_stmt ELSE unmatched_stmt 
            {
              Statement RESULT =null;
		int CONDITIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int CONDITIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression CONDITION = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int IFCLAUSEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int IFCLAUSEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement IFCLAUSE = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ELSECLAUSEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ELSECLAUSEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement ELSECLAUSE = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(CONDITION, IFCLAUSE, ELSECLAUSE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unmatched_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= name_expr ASSIGN expr 
            {
              Expression RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression VALUE = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new Assigment(NAME, VALUE);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= or_expr 
            {
              Expression RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression EXPR = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = EXPR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // or_expr ::= or_expr OR and_expr 
            {
              Expression RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression LEFT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression RIGHT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(LEFT,"or",RIGHT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("or_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // or_expr ::= and_expr 
            {
              Expression RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression EXPR = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = EXPR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("or_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // and_expr ::= and_expr AND eq_expr 
            {
              Expression RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression LEFT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression RIGHT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(LEFT,"and",RIGHT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // and_expr ::= eq_expr 
            {
              Expression RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression EXPR = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = EXPR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // eq_expr ::= eq_expr EQ rel_expr 
            {
              Expression RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression LEFT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression RIGHT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(LEFT,"eq",RIGHT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eq_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // eq_expr ::= eq_expr NE rel_expr 
            {
              Expression RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression LEFT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression RIGHT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(LEFT,"ne",RIGHT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eq_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // eq_expr ::= rel_expr 
            {
              Expression RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression EXPR = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = EXPR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eq_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // rel_expr ::= rel_expr LT add_expr 
            {
              Expression RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression LEFT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression RIGHT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new BinaryExpression(LEFT,"lt",RIGHT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rel_expr ::= rel_expr GT add_expr 
            {
              Expression RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression LEFT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression RIGHT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(LEFT,"gt",RIGHT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rel_expr ::= rel_expr LE add_expr 
            {
              Expression RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression LEFT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression RIGHT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(LEFT,"le",RIGHT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rel_expr ::= rel_expr GE add_expr 
            {
              Expression RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression LEFT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression RIGHT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(LEFT,"ge",RIGHT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rel_expr ::= add_expr 
            {
              Expression RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression EXPR = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = EXPR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // add_expr ::= add_expr ADD mul_expr 
            {
              Expression RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression LEFT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression RIGHT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT  =  new BinaryExpression(LEFT,"sum",RIGHT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("add_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // add_expr ::= add_expr SUB mul_expr 
            {
              Expression RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression LEFT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression RIGHT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT  =  new BinaryExpression(LEFT,"sub",RIGHT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("add_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // add_expr ::= mul_expr 
            {
              Expression RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression EXPR = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = EXPR; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("add_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // mul_expr ::= mul_expr STAR unary_expr 
            {
              Expression RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression LEFT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression RIGHT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT  =  new BinaryExpression(LEFT,"mul",RIGHT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mul_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // mul_expr ::= mul_expr DIV unary_expr 
            {
              Expression RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression LEFT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression RIGHT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT  =  new BinaryExpression(LEFT,"div",RIGHT);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mul_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // mul_expr ::= unary_expr 
            {
              Expression RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression EXPR = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = EXPR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mul_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unary_expr ::= NOT unary_expr 
            {
              Expression RESULT =null;
		int ARGleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ARGright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression ARG = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression("not", ARG);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unary_expr ::= SUB unary_expr 
            {
              Expression RESULT =null;
		int ARGleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ARGright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression ARG = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression("sub", ARG); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unary_expr ::= atomic_expr 
            {
              Expression RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression EXPR = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = EXPR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ternary_expr ::= LPAREN expr RPAREN THENTHREE atomic_expr POINTS sub_atomic_exp 
            {
              Expression RESULT =null;
		int CONDITIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int CONDITIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression CONDITION = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int VALUE1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int VALUE1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression VALUE1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int VALUE2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int VALUE2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression VALUE2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TernaryExpression(CONDITION, VALUE1, VALUE2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ternary_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sub_atomic_exp ::= atomic_expr 
            {
              Expression RESULT =null;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression VALUE = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = VALUE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_atomic_exp",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // atomic_expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int MIDDLEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int MIDDLEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression MIDDLE = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = MIDDLE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // atomic_expr ::= name_expr 
            {
              Expression RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT  = new UnaryExpression("name_expr", NAME); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // atomic_expr ::= STAR name_expr 
            {
              Expression RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT  = new UnaryExpression("pointer_expr", NAME); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // atomic_expr ::= AMP name_expr 
            {
              Expression RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT  = new UnaryExpression("reference_expr", NAME); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // atomic_expr ::= const_expr 
            {
              Expression RESULT =null;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression VALUE = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT  = new UnaryExpression("const_expr", VALUE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // atomic_expr ::= ternary_expr 
            {
              Expression RESULT =null;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression VALUE = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // atomic_expr ::= name_expr LPAREN opt_arg_list RPAREN 
            {
              Expression RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ARGSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ARGSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList ARGS = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        FunctionCall funct  = new FunctionCall(NAME);
	funct.setArguments(ARGS);
	    RESULT = funct;
	;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // atomic_expr ::= name_expr INCREMENT 
            {
              Expression RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT  = new UnaryExpression("increment", NAME);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // atomic_expr ::= name_expr DECREMENT 
            {
              Expression RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT  = new UnaryExpression("increment", NAME); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // name_expr ::= IDENTIFIER 
            {
              String RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT  = NAME;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // const_expr ::= CHAR_LITERAL 
            {
              Expression RESULT =null;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object VALUE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Constant("char",VALUE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // const_expr ::= INT_LITERAL 
            {
              Expression RESULT =null;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String VALUE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Constant("int",VALUE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // const_expr ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object VALUE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Constant("String",VALUE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // const_expr ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new Constant("boolean","true");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // const_expr ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new Constant("boolean", "false");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // opt_param_list ::= param_list 
            {
              ArrayList RESULT =null;
		int LISTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int LISTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList LIST = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList parameters = (ArrayList) LIST;
        RESULT = LIST;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_param_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // opt_param_list ::= 
            {
              ArrayList RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_param_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // param_list ::= param_list COMMA param 
            {
              ArrayList RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList LEFT = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration RIGHT = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList parameters = (ArrayList) LEFT;
	parameters.add(RIGHT);
	RESULT = parameters;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // param_list ::= param 
            {
              ArrayList RESULT =null;
		int PARAMleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int PARAMright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration PARAM = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	ArrayList parameters = new ArrayList();
        parameters.add(PARAM);
        RESULT = parameters;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // param ::= type_spec IDENTIFIER 
            {
              Declaration RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Declaration param  = new Declaration(NAME, TYPE);
        RESULT = param;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // opt_arg_list ::= arg_list 
            {
              ArrayList RESULT =null;
		int LISTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int LISTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList LIST = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	ArrayList parameters = (ArrayList) LIST;
        RESULT = LIST;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_arg_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // opt_arg_list ::= 
            {
              ArrayList RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_arg_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arg_list ::= arg_list COMMA expr 
            {
              ArrayList RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList LEFT = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression RIGHT = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList parameters = (ArrayList) LEFT;
      	parameters.add(RIGHT);
      	RESULT = parameters;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arg_list ::= expr 
            {
              ArrayList RESULT =null;
		int ARGleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ARGright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression ARG = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList parameters = new ArrayList();
        parameters.add(ARG);
        RESULT = parameters;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
