package main;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

parser code 
{:
    public static Node root;

    public int cont = 0;

    public void syntax_error(Symbol s) {
        System.out.println("compiler has detected a syntax error at column " + s.left 
                + " line " + s.right);
    }
    
    /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("CUP detecto un error de syntaxis en " + s.left + " column " + s.right);
    } */
:}


terminal String BOOL, CHAR, INT, EMPTY;
terminal MAIN, IF, ELSE, ORELSE, FOR, WHILE, SWITCH, CASE, DEFAULT, FUNCTION, COMEBACK; 
terminal BREAK, NUMBER, BOOLEAN, CHARACTER, ARRAY, INPUT, OUTPUT, OPREL, SUM, RES, MULT; 
terminal DIV, MOD, SEMICOLON, COLON, COMMA, PARDER, PARIZQ, BRACKETDER, BRACKETIZQ; 
terminal SBRACKETDER, SBRACKETIZQ, ASSIGNMENT, ID;


// Principals non terminals
non terminal program, main, body, b_body;
non terminal proposition;
non terminal function;
non terminal function_list;
non terminal parameter;

// Asignation and declaration
non terminal type;
non terminal simpleDeclaration;
non terminal declaration_assign;
non terminal assignment;
non terminal value;

// Statements
non terminal whileStatement;
non terminal ifStatement;
non terminal forStatement;
non terminal switchStatement;


start with program;


program ::= main function_list | main;

main ::= FUNCTION MAIN PARIZQ PARDER ASSIGNMENT BRACKETIZQ body BRACKETDER;

function_list ::= FUNCTION ID PARIZQ parameter PARDER ASSIGNMENT BRACKETIZQ body BRACKETDER function;

function ::= function_list
            |/*vacío*/;

parameter ::= /*vacío*/;

body ::= proposition b_body;    // Este GLC permite
b_body ::= body | /*vacío*/;    // múltiples proposiciones

proposition ::= simpleDeclaration
        | declaration_assign
        | assignment
        | ifStatement
        | whileStatement
        | forStatement
        | switchStatement;


// => Formas de declaración de variables
simpleDeclaration ::= type ID;

declaration_assign ::= type ID ASSIGNMENT value;

assignment ::= ID ASSIGNMENT value;

value ::= INT
        | BOOL
        | CHAR;

type ::= NUMBER
        | BOOLEAN
        | CHARACTER;

// => Statements
ifStatement ::= IF PARIZQ PARDER BRACKETIZQ body BRACKETDER;