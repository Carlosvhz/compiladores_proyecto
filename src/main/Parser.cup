package main;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

parser code 
{:
    public static Node root;

    public int cont = 0;

    public void syntax_error(Symbol s){ 
       System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
       System.out.println("Sintaxis truena");
    } 

    /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("CUP detecto un error de syntaxis en " + s.left + " column " + s.right);
    } */
:}


terminal String BOOL, CHAR, INT, EMPTY;
terminal MAIN, IF, THEN, ELSE, ORELSE, FOR, TO, WHILE, SWITCH, CASE, DEFAULT, FUNCTION, COMEBACK; 
terminal BREAK, NUMBER, BOOLEAN, CHARACTER, INPUT, OUTPUT, OPREL, SUM, RES, MULT; 
terminal DIV, MOD, SEMICOLON, COLON, COMMA, PARDER, PARIZQ, BRACKETDER, BRACKETIZQ; 
terminal SBRACKETDER, SBRACKETIZQ, ASSIGNMENT, ID, DELIMETER, ARRAY;


// Principals non terminals
non terminal program, main, body, b_body;
non terminal proposition;
non terminal function;
non terminal function_list;

non terminal parameter;
non terminal b_parameter;

// Asignation and declaration
non terminal type;
non terminal array_type;
non terminal simpleDeclaration;
non terminal declaration_assign;
non terminal assignment;
non terminal value;
non terminal aritmetic_expression ;
non terminal b_aritmetic_expression;
non terminal c_aritmetic_expression;
non terminal signo;
non terminal array_value;

// Statements
non terminal whileStatement;
non terminal ifStatement;
non terminal desicion; // Desición para While y If
non terminal forStatement;
non terminal switchStatement;
non terminal return;

start with program;


program ::= main function_list | main;  // SI FUNCIONA >:C

main ::= FUNCTION MAIN PARIZQ PARDER ASSIGNMENT BRACKETIZQ body BRACKETDER;

function_list ::= FUNCTION ID PARIZQ parameter PARDER ASSIGNMENT BRACKETIZQ body BRACKETDER function |
                  FUNCTION ID PARIZQ parameter PARDER ASSIGNMENT type BRACKETIZQ body BRACKETDER function;   // Este GLC permite múltiples funciones
function ::= function_list
        | /*vacío*/;

parameter ::= b_parameter 
        | /*vacío*/;        // GLC para el parámetro que contienen las funciones  
b_parameter ::= ID COLON type 
        | ID COLON type COMMA parameter;

body ::= proposition b_body 
        | {::};    // Este GLC permite
b_body ::= body;    // múltiples proposiciones

proposition ::= simpleDeclaration      
        | declaration_assign
        | assignment
        | return
        | ifStatement
        | whileStatement
        | forStatement
        | switchStatement;      // Este GLC contiene los diferentes statements


simpleDeclaration ::= type ID;  // Declaración simple con el tipo de variable y la ID

declaration_assign ::= type ID ASSIGNMENT value;        // Declaración con asignación incluida

assignment ::= ID ASSIGNMENT value;     // Solamente asignación

signo ::= SUM
        | RES
        | DIV
        | MULT
        | MOD;
value ::= ID
        | BOOL
        | CHAR
        | EMPTY                
        | array_value
        | aritmetic_expression;              // Tipo de valor que pueda contener una expresión
aritmetic_expression ::= INT b_aritmetic_expression
        | PARIZQ INT b_aritmetic_expression PARDER c_aritmetic_expression;
b_aritmetic_expression ::= signo aritmetic_expression
        | /*vacío*/;
c_aritmetic_expression ::= b_aritmetic_expression;

type ::= NUMBER
        | array_type
        | BOOLEAN       
        | CHARACTER;           // Tipo de variable que pude ser una variable
array_type ::= ARRAY SBRACKETIZQ type SBRACKETDER;

return ::= COMEBACK value;

ifStatement ::= IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER
        | IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER ELSE BRACKETIZQ body BRACKETDER; 

whileStatement ::= WHILE PARIZQ desicion PARDER BRACKETIZQ body BRACKETDER;
desicion ::= BOOL
        | INT
        | ID
        | ID OPREL INT
        | ID OPREL CHAR
        | ID OPREL BOOL
        | ID OPREL ID;

forStatement ::= FOR PARIZQ ID ASSIGNMENT INT TO INT DELIMETER INT PARDER BRACKETIZQ body BRACKETDER
        | FOR PARIZQ ID ASSIGNMENT ID TO INT DELIMETER INT PARDER BRACKETIZQ body BRACKETDER
        | FOR PARIZQ ID ASSIGNMENT ID TO ID DELIMETER INT PARDER BRACKETIZQ body BRACKETDER;