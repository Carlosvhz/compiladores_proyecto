package main;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

parser code 
{:
    public static Node father;
    public int cont = 0;
    public static int errores = 0;

    public void syntax_error(Symbol s){ 
       System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
       System.out.println("Sintaxis truena");
    } 

    /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("CUP detecto un error de syntaxis en " + s.left + " column " + s.right);
    } */
:}


terminal String BOOL, CHAR, INT, EMPTY;
terminal MAIN, IF, THEN, ELSE, FOR, TO, WHILE, SWITCH, CASE, DEFAULT, FUNCTION, COMEBACK; 
terminal NUMBER, BOOLEAN, CHARACTER, INPUT, OUTPUT, OPREL, SUM, RES, MULT, CALL; 
terminal DIV, MOD, SEMICOLON, COLON, COMMA, PARDER, PARIZQ, BRACKETDER, BRACKETIZQ; 
terminal SBRACKETDER, SBRACKETIZQ, ASSIGNMENT, ID, DELIMETER, ARRAY;


// Principals non terminals
non terminal program, main, body, b_body;
non terminal proposition;
non terminal function;
non terminal function_list;

non terminal parameter;
non terminal b_parameter;

non terminal functionCall;
non terminal funCall_parameter;
non terminal b_funCall_parameter;

// Asignation and declaration
non terminal type;
non terminal array_type;
non terminal simpleDeclaration;
non terminal declaration_assign;
non terminal assignment;
non terminal value;
non terminal aritmetic_expression ;
non terminal b_aritmetic_expression;
non terminal c_aritmetic_expression;
non terminal signo;
non terminal array_value;

// Statements
non terminal whileStatement;
non terminal ifStatement;
non terminal desicion; // Desición para While y If
non terminal outputStatement;
non terminal inputStatement;
non terminal forStatement;
non terminal switchStatement;
non terminal switch_body;
non terminal case_switch;
non terminal b_case_switch;
non terminal return;

start with program;


program ::= main:m function_list:fl
        {:      // CURRENT NODE
                Node node = new Node();
                node.setTag("INIT");
                node.setId(parser.cont);  
                parser.cont++;
                
                // MAIN
                node.setChild( (Node) m );
                
                // FUNCTION_LIST
                if(fl!=null){
                        node.setChild((Node)fl);
                }

                parser.father = node;
                RESULT = node;
        :};

main ::= FUNCTION MAIN:m PARIZQ PARDER ASSIGNMENT BRACKETIZQ body:b BRACKETDER
        {:      // CURRENT NODE
                Node node = new Node();
                node.setTag("MAIN");
                node.setId(parser.cont);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setId(parser.cont);
                id.setValue((String) m);
                node.setChild(id);
                parser.cont++;

                // BODY
                if (b!=null) node.setChild( (Node) b );

                parser.father = node;
                RESULT = node;
        :};

function_list ::= function:f function_list:fl
        {:      
                // CURRENT NODE
                Node node = new Node();
                node.setTag("FUNCTION_LIST");
                node.setId(parser.cont);
                parser.cont++;

                // FUNCTION
                node.setChild((Node)f);

                if(fl!=null){
                        node.setChild( ((Node)fl).getChildren() );                      
                        parser.cont++;
                }else{
                        parser.cont++;
                }

                parser.father = node;
                RESULT = node;
        :} 
        | {:

        :}; // Este GLC permite múltiples funciones
function ::= FUNCTION ID:i PARIZQ parameter:p PARDER ASSIGNMENT BRACKETIZQ body:b BRACKETDER
        {:      // CURRENT NODE
                Node node = new Node();
                node.setTag("FUNCTION");
                node.setId(parser.cont);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setId(parser.cont);
                id.setValue( (String) i);
                node.setChild(id);
                parser.cont++;

                // PARAMETER
                //node.setChild( (Node) p );
                
                // BODY
                if (b!=null) node.setChild( (Node) b );
                
                parser.father = node;
                RESULT = node;
        :}
        | FUNCTION ID:i PARIZQ parameter:p PARDER ASSIGNMENT type:t BRACKETIZQ body:b return:r BRACKETDER
        {:
                // CURRENT NODE
                Node node = new Node();
                node.setTag("FUNCTION");
                node.setId(parser.cont);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setId(parser.cont);
                id.setValue( (String) i);
                node.setChild(id);
                parser.cont++;

                // PARAMETER
                // node.setChild( (Node) p );
                
                // RETURN TYPE
                // node.setChild( (Node) t );

                // BODY
                if (b!=null) node.setChild( (Node) b );

                // RETURN
                // node.setChild( (Node) r);

                RESULT = node;
        :};

parameter ::= b_parameter 
        | /*vacío*/;        // GLC para el parámetro que contienen las funciones  
b_parameter ::= ID COLON type 
        | ID COLON type COMMA parameter;

body ::= proposition:p body:b
        {:
                // CURRENT NODE
                Node node = new Node();
                node.setTag("BODY");
                node.setId(parser.cont);
                parser.cont++;

                // PROPOSITION
                node.setChild( (Node) p );
                
                if(b!=null){
                        node.setChild( ((Node)b).getChildren() );
                        parser.cont++;                      
                }else{
                        parser.cont++;
                }
                
                parser.father = node;
                RESULT = node;
        :}
        | {:/*Vacío*/:}; // Este GLC permite múltiples proposiciones   
proposition ::= type:t ID:i
        {:      
                Node node = new Node();
                node.setTag("SIMPLE_DECLARATION");
                node.setId(parser.cont);
                parser.cont++;

                // TYPE
                node.setChild( (Node) t);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue((String)i);
                id.setId(parser.cont);
                
                node.setChild(id);
                parser.cont++;

                parser.father = node;
                RESULT = node;
        :} 
        | type:t ID:i ASSIGNMENT:a value:v
        {:
                Node node = new Node();
                node.setTag("DECLARATION_ASSIGNATION");
                node.setId(parser.cont);
                parser.cont++;

                // TYPE
                node.setChild( (Node) t);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue( (String) i);
                id.setId(parser.cont);
                node.setChild(id);
                parser.cont++;

                // ASSIGNMENT
                Node as = new Node();
                as.setTag("ASSIGNMENT");
                as.setValue( (String) a);
                as.setId(parser.cont);
                node.setChild(as);
                parser.cont++;

                // VALUE
                node.setChild( (Node) v);
                parser.cont++;

                parser.father = node;
                RESULT = node;     
        :}
        | ID:i ASSIGNMENT:a value:v
        {:
                Node node = new Node();
                node.setTag("ASSIGNMENT");
                node.setId(parser.cont);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue( (String) i);
                id.setId(parser.cont);
                node.setChild(id);
                parser.cont++;

                // ASSIGNMENT
                Node as = new Node();
                as.setTag("ASSIGNMENT");
                as.setValue( (String) a);
                as.setId(parser.cont);
                node.setChild(as);
                parser.cont++;

                // VALUE
                node.setChild( (Node) v);
                parser.cont++;

                parser.father = node;
                RESULT = node;   
        :}
        | CALL ID:i PARIZQ PARDER 
        {:
                Node node = new Node();
                node.setTag("FUNCTION_CALL");
                node.setId(parser.cont);
                parser.cont++;

                // CALL
                Node call = new Node();
                call.setTag("CALL");
                call.setId(parser.cont);
                node.setChild(call);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue((String)i);
                id.setId(parser.cont);
                node.setChild(id);
                parser.cont++;

                parser.father = node;
                RESULT = node;   
        :}
        | CALL ID:i PARIZQ funCall_parameter:f PARDER
        {:
                Node node = new Node();
                node.setTag("FUNCTION_CALL");
                node.setId(parser.cont);
                parser.cont++;

                // CALL
                Node call = new Node();
                call.setTag("CALL");
                call.setId(parser.cont);
                node.setChild(call);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue((String)i);
                id.setId(parser.cont);
                node.setChild(id);
                parser.cont++;

                // PARAMETERS


                parser.father = node;
                RESULT = node; 
        :}
        | outputStatement 
        {:
                Node node = new Node();
                node.setTag("OUTPUT");
                node.setId(parser.cont);
                parser.cont++;

                // SIMPLE_DECLARATION
                // node.setChild( (Node) sp);
                node.setChild(new Node(":V"));

                parser.father = node;
                RESULT = node;
        :}
        | inputStatement 
        {:
                Node node = new Node();
                node.setTag("INPUT");
                node.setId(parser.cont);
                parser.cont++;

                // SIMPLE_DECLARATION
                // node.setChild( (Node) sp);
                node.setChild(new Node(":V"));

                parser.father = node;
                RESULT = node;
        :}
        | ifStatement 
        {:
                Node node = new Node();
                node.setTag("IF");
                node.setId(parser.cont);
                parser.cont++;

                // SIMPLE_DECLARATION
                // node.setChild( (Node) sp);
                node.setChild(new Node(":V"));

                parser.father = node;
                RESULT = node;
        :}
        | whileStatement 
        {:
                Node node = new Node();
                node.setTag("WHILE");
                node.setId(parser.cont);
                parser.cont++;

                // SIMPLE_DECLARATION
                // node.setChild( (Node) sp);
                node.setChild(new Node(":V"));

                parser.father = node;
                RESULT = node;
        :}
        | forStatement 
        {:
                Node node = new Node();
                node.setTag("FOR");
                node.setId(parser.cont);
                parser.cont++;

                // SIMPLE_DECLARATION
                // node.setChild( (Node) sp);
                node.setChild(new Node(":V"));

                parser.father = node;
                RESULT = node;
        :}
        | switchStatement 
        {:      
                Node node = new Node();
                node.setTag("SWTICH");
                node.setId(parser.cont);
                parser.cont++;

                // SIMPLE_DECLARATION
                // node.setChild( (Node) sp);
                node.setChild(new Node(":V"));

                parser.father = node;
                RESULT = node;
        :} ;      // Este GLC contiene los diferentes statements

funCall_parameter ::= b_funCall_parameter
        | value;
b_funCall_parameter ::= value COMMA funCall_parameter;

signo ::= SUM
        | RES
        | DIV
        | MULT
        | MOD;
value ::= ID:id
        {:
                Node node = new Node();
                node.setTag("VALUE ID");
                node.setValue((String)id);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        :}
        | BOOL:b
        {:
                Node node = new Node();
                node.setTag("VALUE BOOL");
                node.setValue((String)b);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        :}
        | CHAR:c
        {:
                Node node = new Node();
                node.setTag("VALUE CHAR");
                node.setValue((String)c);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        :}
        | EMPTY:e
        {:
                Node node = new Node();
                node.setTag("VALUE EMPTY");
                node.setValue((String)e);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        :}                
        | array_value:av
        {:

        :}
        | INT:i
        {:
                Node node = new Node();
                node.setTag("VALUE INT");
                node.setValue((String)i);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        :};              // Tipo de valor que pueda contener una expresión

/* aritmetic_expression ::= INT b_aritmetic_expression
        | PARIZQ INT b_aritmetic_expression PARDER c_aritmetic_expression;
b_aritmetic_expression ::= signo aritmetic_expression
        | {::} ;

c_aritmetic_expression ::= b_aritmetic_expression; */

type ::= NUMBER:n
        {:
                Node node = new Node();
                node.setTag("TYPE");
                node.setValue((String)n);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        :}
        | array_type:a
        {:
                
        :}
        | BOOLEAN:b
        {:
                Node node = new Node();
                node.setTag("TYPE");
                node.setValue((String)b);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        :}       
        | CHARACTER:c
        {:
                Node node = new Node();
                node.setTag("TYPE");
                node.setValue((String)c);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        :};           // Tipo de variable que pude ser una variable
array_type ::= ARRAY SBRACKETIZQ type SBRACKETDER;

return ::= COMEBACK value;

outputStatement ::= OUTPUT PARIZQ value PARDER;

inputStatement ::= ID ASSIGNMENT INPUT PARIZQ PARDER;

ifStatement ::= IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER
        | IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER ELSE BRACKETIZQ body BRACKETDER
        | IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER ELSE ifStatement;

whileStatement ::= WHILE PARIZQ desicion PARDER BRACKETIZQ body BRACKETDER;
desicion ::= BOOL
        | INT
        | ID
        | ID OPREL INT
        | ID OPREL CHAR
        | ID OPREL BOOL
        | ID OPREL ID;

forStatement ::= FOR PARIZQ ID ASSIGNMENT INT TO INT DELIMETER INT PARDER BRACKETIZQ body BRACKETDER
        | FOR PARIZQ ID ASSIGNMENT ID TO INT DELIMETER INT PARDER BRACKETIZQ body BRACKETDER
        | FOR PARIZQ ID ASSIGNMENT ID TO ID DELIMETER INT PARDER BRACKETIZQ body BRACKETDER;

switchStatement ::= SWITCH PARIZQ ID PARDER BRACKETIZQ switch_body BRACKETDER;
switch_body ::=  case_switch DEFAULT COLON BRACKETIZQ body BRACKETDER;
case_switch ::= CASE PARIZQ value PARDER COLON BRACKETIZQ body BRACKETDER b_case_switch 
        | /*vacío*/; 
b_case_switch ::= case_switch;