
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\012\000\002\010\014\000\002\010\016" +
    "\000\002\007\003\000\002\007\002\000\002\011\003\000" +
    "\002\011\002\000\002\012\005\000\002\012\007\000\002" +
    "\004\004\000\002\004\002\000\002\005\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\013\005\000\002\013\006\000\002\014\003\000\002\014" +
    "\003\000\002\015\005\000\002\020\004\000\002\021\006" +
    "\000\002\022\005\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\006\000\002\043\004\000\002\034\006\000\002" +
    "\035\007\000\002\032\012\000\002\032\016\000\002\032" +
    "\014\000\002\031\011\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\036\017\000\002" +
    "\036\017\000\002\036\017\000\002\037\011\000\002\040" +
    "\010\000\002\041\013\000\002\041\002\000\002\042\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\022\006\001\002\000\006\002\uffff\022" +
    "\221\001\002\000\004\002\217\001\002\000\004\010\007" +
    "\001\002\000\004\043\010\001\002\000\004\042\011\001" +
    "\002\000\004\050\012\001\002\000\004\045\013\001\002" +
    "\000\030\011\023\014\040\016\017\017\021\024\031\025" +
    "\027\026\015\030\041\044\ufff4\051\024\053\042\001\002" +
    "\000\032\011\uffeb\014\uffeb\016\uffeb\017\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\030\uffeb\044\uffeb\051\uffeb\053\uffeb" +
    "\001\002\000\014\041\uffd2\042\uffd2\045\uffd2\046\uffd2\051" +
    "\uffd2\001\002\000\004\051\214\001\002\000\004\043\206" +
    "\001\002\000\032\011\ufff1\014\ufff1\016\ufff1\017\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\030\ufff1\044\ufff1\051\ufff1" +
    "\053\ufff1\001\002\000\004\043\160\001\002\000\032\011" +
    "\uffe9\014\uffe9\016\uffe9\017\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\030\uffe9\044\uffe9\051\uffe9\053\uffe9\001\002\000" +
    "\004\043\134\001\002\000\006\043\120\050\117\001\002" +
    "\000\032\011\ufff2\014\ufff2\016\ufff2\017\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\030\ufff2\044\ufff2\051\ufff2\053\ufff2" +
    "\001\002\000\004\044\116\001\002\000\014\041\uffd3\042" +
    "\uffd3\045\uffd3\046\uffd3\051\uffd3\001\002\000\032\011\uffed" +
    "\014\uffed\016\uffed\017\uffed\023\uffed\024\uffed\025\uffed\026" +
    "\uffed\030\uffed\044\uffed\051\uffed\053\uffed\001\002\000\014" +
    "\041\uffd5\042\uffd5\045\uffd5\046\uffd5\051\uffd5\001\002\000" +
    "\032\011\uffee\014\uffee\016\uffee\017\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\030\uffee\044\uffee\051\uffee\053\uffee\001" +
    "\002\000\032\011\uffec\014\uffec\016\uffec\017\uffec\023\uffec" +
    "\024\uffec\025\uffec\026\uffec\030\uffec\044\uffec\051\uffec\053" +
    "\uffec\001\002\000\032\011\ufff0\014\ufff0\016\ufff0\017\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\030\ufff0\044\ufff0\051" +
    "\ufff0\053\ufff0\001\002\000\032\011\uffea\014\uffea\016\uffea" +
    "\017\uffea\023\uffea\024\uffea\025\uffea\026\uffea\030\uffea\044" +
    "\uffea\051\uffea\053\uffea\001\002\000\032\011\uffef\014\uffef" +
    "\016\uffef\017\uffef\023\uffef\024\uffef\025\uffef\026\uffef\030" +
    "\uffef\044\uffef\051\uffef\053\uffef\001\002\000\014\041\uffd4" +
    "\042\uffd4\045\uffd4\046\uffd4\051\uffd4\001\002\000\004\043" +
    "\062\001\002\000\004\043\051\001\002\000\004\047\046" +
    "\001\002\000\032\011\023\014\040\016\017\017\021\023" +
    "\ufff4\024\031\025\027\026\015\030\041\044\ufff4\051\024" +
    "\053\042\001\002\000\006\023\ufff5\044\ufff5\001\002\000" +
    "\006\023\ufff3\044\ufff3\001\002\000\012\024\031\025\027" +
    "\026\015\053\042\001\002\000\004\046\050\001\002\000" +
    "\014\041\uffd1\042\uffd1\045\uffd1\046\uffd1\051\uffd1\001\002" +
    "\000\014\004\053\005\057\006\060\007\056\051\052\001" +
    "\002\000\036\011\uffdb\014\uffdb\016\uffdb\017\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\030\uffdb\041\uffdb\042\uffdb\044" +
    "\uffdb\051\uffdb\053\uffdb\001\002\000\036\011\uffda\014\uffda" +
    "\016\uffda\017\uffda\023\uffda\024\uffda\025\uffda\026\uffda\030" +
    "\uffda\041\uffda\042\uffda\044\uffda\051\uffda\053\uffda\001\002" +
    "\000\036\011\uffd7\014\uffd7\016\uffd7\017\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\030\uffd7\041\uffd7\042\uffd7\044\uffd7" +
    "\051\uffd7\053\uffd7\001\002\000\004\042\061\001\002\000" +
    "\036\011\uffd8\014\uffd8\016\uffd8\017\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\030\uffd8\041\uffd8\042\uffd8\044\uffd8\051" +
    "\uffd8\053\uffd8\001\002\000\036\011\uffd9\014\uffd9\016\uffd9" +
    "\017\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\030\uffd9\041" +
    "\uffd9\042\uffd9\044\uffd9\051\uffd9\053\uffd9\001\002\000\036" +
    "\011\uffd6\014\uffd6\016\uffd6\017\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\030\uffd6\041\uffd6\042\uffd6\044\uffd6\051\uffd6" +
    "\053\uffd6\001\002\000\032\011\uffcf\014\uffcf\016\uffcf\017" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\030\uffcf\044\uffcf" +
    "\051\uffcf\053\uffcf\001\002\000\004\051\063\001\002\000" +
    "\004\050\064\001\002\000\006\006\066\051\065\001\002" +
    "\000\004\015\077\001\002\000\004\015\067\001\002\000" +
    "\004\006\070\001\002\000\004\052\071\001\002\000\004" +
    "\006\072\001\002\000\004\042\073\001\002\000\004\045" +
    "\074\001\002\000\030\011\023\014\040\016\017\017\021" +
    "\024\031\025\027\026\015\030\041\044\ufff4\051\024\053" +
    "\042\001\002\000\004\044\076\001\002\000\032\011\uffc2" +
    "\014\uffc2\016\uffc2\017\uffc2\023\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\030\uffc2\044\uffc2\051\uffc2\053\uffc2\001\002\000\006" +
    "\006\101\051\100\001\002\000\004\052\110\001\002\000" +
    "\004\052\102\001\002\000\004\006\103\001\002\000\004" +
    "\042\104\001\002\000\004\045\105\001\002\000\030\011" +
    "\023\014\040\016\017\017\021\024\031\025\027\026\015" +
    "\030\041\044\ufff4\051\024\053\042\001\002\000\004\044" +
    "\107\001\002\000\032\011\uffc1\014\uffc1\016\uffc1\017\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\030\uffc1\044\uffc1\051" +
    "\uffc1\053\uffc1\001\002\000\004\006\111\001\002\000\004" +
    "\042\112\001\002\000\004\045\113\001\002\000\030\011" +
    "\023\014\040\016\017\017\021\024\031\025\027\026\015" +
    "\030\041\044\ufff4\051\024\053\042\001\002\000\004\044" +
    "\115\001\002\000\032\011\uffc0\014\uffc0\016\uffc0\017\uffc0" +
    "\023\uffc0\024\uffc0\025\uffc0\026\uffc0\030\uffc0\044\uffc0\051" +
    "\uffc0\053\uffc0\001\002\000\006\002\ufffe\022\ufffe\001\002" +
    "\000\016\004\053\005\057\006\060\007\056\027\130\051" +
    "\052\001\002\000\016\004\053\005\057\006\060\007\056" +
    "\042\123\051\052\001\002\000\004\042\127\001\002\000" +
    "\004\042\uffe6\001\002\000\032\011\uffe8\014\uffe8\016\uffe8" +
    "\017\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\044" +
    "\uffe8\051\uffe8\053\uffe8\001\002\000\006\041\125\042\uffe5" +
    "\001\002\000\014\004\053\005\057\006\060\007\056\051" +
    "\052\001\002\000\004\042\uffe4\001\002\000\032\011\uffe7" +
    "\014\uffe7\016\uffe7\017\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\030\uffe7\044\uffe7\051\uffe7\053\uffe7\001\002\000\004" +
    "\043\132\001\002\000\032\011\uffe1\014\uffe1\016\uffe1\017" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1\044\uffe1" +
    "\051\uffe1\053\uffe1\001\002\000\004\042\133\001\002\000" +
    "\032\011\uffce\014\uffce\016\uffce\017\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\030\uffce\044\uffce\051\uffce\053\uffce\001" +
    "\002\000\010\004\137\006\140\051\135\001\002\000\006" +
    "\031\153\042\uffc7\001\002\000\004\042\141\001\002\000" +
    "\004\042\uffc9\001\002\000\004\042\uffc8\001\002\000\004" +
    "\012\142\001\002\000\004\045\143\001\002\000\030\011" +
    "\023\014\040\016\017\017\021\024\031\025\027\026\015" +
    "\030\041\044\ufff4\051\024\053\042\001\002\000\004\044" +
    "\145\001\002\000\034\011\uffcd\013\146\014\uffcd\016\uffcd" +
    "\017\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\030\uffcd\044" +
    "\uffcd\051\uffcd\053\uffcd\001\002\000\006\011\023\045\147" +
    "\001\002\000\030\011\023\014\040\016\017\017\021\024" +
    "\031\025\027\026\015\030\041\044\ufff4\051\024\053\042" +
    "\001\002\000\032\011\uffcb\014\uffcb\016\uffcb\017\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\030\uffcb\044\uffcb\051\uffcb" +
    "\053\uffcb\001\002\000\004\044\152\001\002\000\032\011" +
    "\uffcc\014\uffcc\016\uffcc\017\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\030\uffcc\044\uffcc\051\uffcc\053\uffcc\001\002\000" +
    "\012\004\155\005\156\006\157\051\154\001\002\000\004" +
    "\042\uffc3\001\002\000\004\042\uffc4\001\002\000\004\042" +
    "\uffc5\001\002\000\004\042\uffc6\001\002\000\004\051\161" +
    "\001\002\000\004\042\162\001\002\000\004\045\163\001" +
    "\002\000\006\020\166\021\uffbc\001\002\000\004\044\205" +
    "\001\002\000\004\021\200\001\002\000\004\043\167\001" +
    "\002\000\014\004\053\005\057\006\060\007\056\051\052" +
    "\001\002\000\004\042\171\001\002\000\004\040\172\001" +
    "\002\000\004\045\173\001\002\000\030\011\023\014\040" +
    "\016\017\017\021\024\031\025\027\026\015\030\041\044" +
    "\ufff4\051\024\053\042\001\002\000\004\044\175\001\002" +
    "\000\006\020\166\021\uffbc\001\002\000\004\021\uffbb\001" +
    "\002\000\004\021\uffbd\001\002\000\004\040\201\001\002" +
    "\000\004\045\202\001\002\000\030\011\023\014\040\016" +
    "\017\017\021\024\031\025\027\026\015\030\041\044\ufff4" +
    "\051\024\053\042\001\002\000\004\044\204\001\002\000" +
    "\004\044\uffbe\001\002\000\032\011\uffbf\014\uffbf\016\uffbf" +
    "\017\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\030\uffbf\044" +
    "\uffbf\051\uffbf\053\uffbf\001\002\000\010\004\137\006\140" +
    "\051\135\001\002\000\004\042\210\001\002\000\004\045" +
    "\211\001\002\000\030\011\023\014\040\016\017\017\021" +
    "\024\031\025\027\026\015\030\041\044\ufff4\051\024\053" +
    "\042\001\002\000\004\044\213\001\002\000\032\011\uffca" +
    "\014\uffca\016\uffca\017\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\030\uffca\044\uffca\051\uffca\053\uffca\001\002\000\034" +
    "\011\uffe3\014\uffe3\016\uffe3\017\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\030\uffe3\044\uffe3\050\215\051\uffe3\053\uffe3" +
    "\001\002\000\014\004\053\005\057\006\060\007\056\051" +
    "\052\001\002\000\032\011\uffe2\014\uffe2\016\uffe2\017\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\044\uffe2\051" +
    "\uffe2\053\uffe2\001\002\000\004\002\001\001\002\000\004" +
    "\002\000\001\002\000\004\051\222\001\002\000\004\043" +
    "\223\001\002\000\006\042\ufff8\051\224\001\002\000\004" +
    "\040\246\001\002\000\004\042\ufff9\001\002\000\004\042" +
    "\227\001\002\000\004\050\230\001\002\000\014\024\031" +
    "\025\027\026\015\045\231\053\042\001\002\000\030\011" +
    "\023\014\040\016\017\017\021\024\031\025\027\026\015" +
    "\030\041\044\ufff4\051\024\053\042\001\002\000\004\045" +
    "\233\001\002\000\030\011\023\014\040\016\017\017\021" +
    "\023\ufff4\024\031\025\027\026\015\030\041\051\024\053" +
    "\042\001\002\000\004\023\236\001\002\000\004\044\240" +
    "\001\002\000\014\004\053\005\057\006\060\007\056\051" +
    "\052\001\002\000\004\044\uffd0\001\002\000\006\002\ufffa" +
    "\022\221\001\002\000\004\002\ufffc\001\002\000\004\002" +
    "\ufffb\001\002\000\004\044\244\001\002\000\006\002\ufffa" +
    "\022\221\001\002\000\004\002\ufffd\001\002\000\012\024" +
    "\031\025\027\026\015\053\042\001\002\000\006\041\250" +
    "\042\ufff7\001\002\000\006\042\ufff8\051\224\001\002\000" +
    "\004\042\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\006\002\004\003\003\001\001\000\004\010" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\025\006\042\013\035\016\015\017\036" +
    "\020\024\021\017\022\033\031\013\032\032\034\031\035" +
    "\027\036\034\037\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\044\005" +
    "\043\006\042\013\035\016\015\017\036\020\024\021\017" +
    "\022\033\031\013\032\032\034\031\035\027\036\034\037" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\046\017\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\054\030\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\074\006\042\013\035\016\015" +
    "\017\036\020\024\021\017\022\033\031\013\032\032\034" +
    "\031\035\027\036\034\037\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\105\006\042\013\035\016\015\017" +
    "\036\020\024\021\017\022\033\031\013\032\032\034\031" +
    "\035\027\036\034\037\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\113\006\042\013\035\016\015\017" +
    "\036\020\024\021\017\022\033\031\013\032\032\034\031" +
    "\035\027\036\034\037\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\130\030\053" +
    "\001\001\000\012\014\120\015\121\023\123\030\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\125\015\121\023\123\030" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\143\006\042\013\035" +
    "\016\015\017\036\020\024\021\017\022\033\031\013\032" +
    "\032\034\031\035\027\036\034\037\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\147\001\001\000" +
    "\036\004\150\006\042\013\035\016\015\017\036\020\024" +
    "\021\017\022\033\031\013\032\032\034\031\035\027\036" +
    "\034\037\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\163\041\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\167\030\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\173\006\042\013\035\016\015\017\036\020\024\021" +
    "\017\022\033\031\013\032\032\034\031\035\027\036\034" +
    "\037\021\001\001\000\002\001\001\000\006\041\175\042" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\202\006\042\013" +
    "\035\016\015\017\036\020\024\021\017\022\033\031\013" +
    "\032\032\034\031\035\027\036\034\037\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\211\006\042\013\035\016\015\017\036\020\024" +
    "\021\017\022\033\031\013\032\032\034\031\035\027\036" +
    "\034\037\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\215\030\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\225\012\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\231\017\036\001\001\000" +
    "\036\004\242\006\042\013\035\016\015\017\036\020\024" +
    "\021\017\022\033\031\013\032\032\034\031\035\027\036" +
    "\034\037\021\001\001\000\002\001\001\000\036\004\233" +
    "\006\042\013\035\016\015\017\036\020\024\021\017\022" +
    "\033\031\013\032\032\034\031\035\027\036\034\037\021" +
    "\001\001\000\004\043\234\001\001\000\002\001\001\000" +
    "\006\023\236\030\053\001\001\000\002\001\001\000\006" +
    "\007\240\010\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\244\010\241\001\001" +
    "\000\002\001\001\000\006\016\246\017\036\001\001\000" +
    "\002\001\001\000\006\011\250\012\224\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Node root;

    public int cont = 0;

    public void syntax_error(Symbol s){ 
       System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
       System.out.println("Sintaxis truena");
    } 

    /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("CUP detecto un error de syntaxis en " + s.left + " column " + s.right);
    } */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= main function_list 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= main 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main ::= FUNCTION MAIN PARIZQ PARDER ASSIGNMENT BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function_list ::= FUNCTION ID PARIZQ parameter PARDER ASSIGNMENT BRACKETIZQ body BRACKETDER function 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function_list",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_list ::= FUNCTION ID PARIZQ parameter PARDER ASSIGNMENT type BRACKETIZQ body return BRACKETDER function 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function_list",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function ::= function_list 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameter ::= b_parameter 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameter",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parameter ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameter",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // b_parameter ::= ID COLON type 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("b_parameter",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // b_parameter ::= ID COLON type COMMA parameter 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("b_parameter",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // body ::= proposition b_body 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b_body ::= body 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("b_body",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // proposition ::= simpleDeclaration 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // proposition ::= declaration_assign 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // proposition ::= assignment 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // proposition ::= functionCall 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // proposition ::= outputStatement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // proposition ::= inputStatement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // proposition ::= ifStatement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // proposition ::= whileStatement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // proposition ::= forStatement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // proposition ::= switchStatement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // functionCall ::= ID PARIZQ PARDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("functionCall",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // functionCall ::= ID PARIZQ funCall_parameter PARDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("functionCall",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funCall_parameter ::= b_funCall_parameter 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funCall_parameter",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funCall_parameter ::= value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funCall_parameter",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // b_funCall_parameter ::= value COMMA funCall_parameter 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("b_funCall_parameter",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // simpleDeclaration ::= type ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("simpleDeclaration",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaration_assign ::= type ID ASSIGNMENT value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_assign",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // assignment ::= ID ASSIGNMENT value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assignment",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // signo ::= SUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("signo",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // signo ::= RES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("signo",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // signo ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("signo",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // signo ::= MULT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("signo",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // signo ::= MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("signo",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // value ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // value ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // value ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // value ::= EMPTY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // value ::= array_value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // value ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= NUMBER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= array_type 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // array_type ::= ARRAY SBRACKETIZQ type SBRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("array_type",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // return ::= COMEBACK value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("return",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // outputStatement ::= OUTPUT PARIZQ value PARDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("outputStatement",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // inputStatement ::= ID ASSIGNMENT INPUT PARIZQ PARDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inputStatement",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ifStatement ::= IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ifStatement",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ifStatement ::= IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER ELSE BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ifStatement",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ifStatement ::= IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER ELSE ifStatement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ifStatement",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // whileStatement ::= WHILE PARIZQ desicion PARDER BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("whileStatement",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // desicion ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // desicion ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // desicion ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // desicion ::= ID OPREL INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // desicion ::= ID OPREL CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // desicion ::= ID OPREL BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // desicion ::= ID OPREL ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // forStatement ::= FOR PARIZQ ID ASSIGNMENT INT TO INT DELIMETER INT PARDER BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("forStatement",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // forStatement ::= FOR PARIZQ ID ASSIGNMENT ID TO INT DELIMETER INT PARDER BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("forStatement",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // forStatement ::= FOR PARIZQ ID ASSIGNMENT ID TO ID DELIMETER INT PARDER BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("forStatement",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // switchStatement ::= SWITCH PARIZQ ID PARDER BRACKETIZQ switch_body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switchStatement",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // switch_body ::= case_switch DEFAULT COLON BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("switch_body",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // case_switch ::= CASE PARIZQ value PARDER COLON BRACKETIZQ body BRACKETDER b_case_switch 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_switch",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // case_switch ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("case_switch",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // b_case_switch ::= case_switch 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("b_case_switch",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
