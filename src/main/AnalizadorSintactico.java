
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\012\000\002\010\014\000\002\010\015" +
    "\000\002\007\003\000\002\007\002\000\002\011\003\000" +
    "\002\011\002\000\002\012\005\000\002\012\007\000\002" +
    "\004\004\000\002\004\002\000\002\005\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\015\004\000\002\016\006\000\002" +
    "\017\005\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\021\004\000\002" +
    "\021\007\000\002\022\004\000\002\022\002\000\002\023" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\006\000\002\033\004\000" +
    "\002\027\012\000\002\027\016\000\002\026\011\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\031\017\000\002\031\017\000\002\031\017" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\023\006\001\002\000\006\002\uffff\023" +
    "\171\001\002\000\004\002\167\001\002\000\004\010\007" +
    "\001\002\000\004\045\010\001\002\000\004\044\011\001" +
    "\002\000\004\052\012\001\002\000\004\047\013\001\002" +
    "\000\026\011\023\015\036\017\017\024\020\026\030\027" +
    "\027\030\016\046\ufff4\053\024\055\037\001\002\000\026" +
    "\011\uffed\015\uffed\017\uffed\024\uffed\026\uffed\027\uffed\030" +
    "\uffed\046\uffed\053\uffed\055\uffed\001\002\000\004\053\164" +
    "\001\002\000\014\043\uffd4\044\uffd4\047\uffd4\050\uffd4\053" +
    "\uffd4\001\002\000\004\045\156\001\002\000\016\004\105" +
    "\005\114\006\104\007\106\045\110\053\111\001\002\000" +
    "\026\011\ufff1\015\ufff1\017\ufff1\024\ufff1\026\ufff1\027\ufff1" +
    "\030\ufff1\046\ufff1\053\ufff1\055\ufff1\001\002\000\026\011" +
    "\uffeb\015\uffeb\017\uffeb\024\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\046\uffeb\053\uffeb\055\uffeb\001\002\000\004\045\132\001" +
    "\002\000\004\052\103\001\002\000\026\011\ufff2\015\ufff2" +
    "\017\ufff2\024\ufff2\026\ufff2\027\ufff2\030\ufff2\046\ufff2\053" +
    "\ufff2\055\ufff2\001\002\000\004\046\102\001\002\000\014" +
    "\043\uffd5\044\uffd5\047\uffd5\050\uffd5\053\uffd5\001\002\000" +
    "\014\043\uffd7\044\uffd7\047\uffd7\050\uffd7\053\uffd7\001\002" +
    "\000\026\011\uffee\015\uffee\017\uffee\024\uffee\026\uffee\027" +
    "\uffee\030\uffee\046\uffee\053\uffee\055\uffee\001\002\000\026" +
    "\011\ufff0\015\ufff0\017\ufff0\024\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\046\ufff0\053\ufff0\055\ufff0\001\002\000\026\011\uffec" +
    "\015\uffec\017\uffec\024\uffec\026\uffec\027\uffec\030\uffec\046" +
    "\uffec\053\uffec\055\uffec\001\002\000\026\011\uffef\015\uffef" +
    "\017\uffef\024\uffef\026\uffef\027\uffef\030\uffef\046\uffef\053" +
    "\uffef\055\uffef\001\002\000\014\043\uffd6\044\uffd6\047\uffd6" +
    "\050\uffd6\053\uffd6\001\002\000\004\045\046\001\002\000" +
    "\004\051\043\001\002\000\026\011\023\015\036\017\017" +
    "\024\020\026\030\027\027\030\016\046\ufff4\053\024\055" +
    "\037\001\002\000\004\046\ufff5\001\002\000\004\046\ufff3" +
    "\001\002\000\012\026\030\027\027\030\016\055\037\001" +
    "\002\000\004\050\045\001\002\000\014\043\uffd3\044\uffd3" +
    "\047\uffd3\050\uffd3\053\uffd3\001\002\000\004\053\047\001" +
    "\002\000\004\052\050\001\002\000\006\006\052\053\051" +
    "\001\002\000\004\016\063\001\002\000\004\016\053\001" +
    "\002\000\004\006\054\001\002\000\004\054\055\001\002" +
    "\000\004\006\056\001\002\000\004\044\057\001\002\000" +
    "\004\047\060\001\002\000\026\011\023\015\036\017\017" +
    "\024\020\026\030\027\027\030\016\046\ufff4\053\024\055" +
    "\037\001\002\000\004\046\062\001\002\000\026\011\uffc7" +
    "\015\uffc7\017\uffc7\024\uffc7\026\uffc7\027\uffc7\030\uffc7\046" +
    "\uffc7\053\uffc7\055\uffc7\001\002\000\006\006\065\053\064" +
    "\001\002\000\004\054\074\001\002\000\004\054\066\001" +
    "\002\000\004\006\067\001\002\000\004\044\070\001\002" +
    "\000\004\047\071\001\002\000\026\011\023\015\036\017" +
    "\017\024\020\026\030\027\027\030\016\046\ufff4\053\024" +
    "\055\037\001\002\000\004\046\073\001\002\000\026\011" +
    "\uffc6\015\uffc6\017\uffc6\024\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\046\uffc6\053\uffc6\055\uffc6\001\002\000\004\006\075\001" +
    "\002\000\004\044\076\001\002\000\004\047\077\001\002" +
    "\000\026\011\023\015\036\017\017\024\020\026\030\027" +
    "\027\030\016\046\ufff4\053\024\055\037\001\002\000\004" +
    "\046\101\001\002\000\026\011\uffc5\015\uffc5\017\uffc5\024" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\046\uffc5\053\uffc5\055\uffc5" +
    "\001\002\000\006\002\ufffe\023\ufffe\001\002\000\016\004" +
    "\105\005\114\006\104\007\106\045\110\053\111\001\002" +
    "\000\042\011\uffd9\015\uffd9\017\uffd9\024\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\034\120\035\116\036\121\037\124\040\117" +
    "\044\uffd9\046\uffd9\053\uffd9\055\uffd9\001\002\000\026\011" +
    "\uffe1\015\uffe1\017\uffe1\024\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\046\uffe1\053\uffe1\055\uffe1\001\002\000\026\011\uffdf\015" +
    "\uffdf\017\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf\046\uffdf" +
    "\053\uffdf\055\uffdf\001\002\000\026\011\uffdd\015\uffdd\017" +
    "\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd\046\uffdd\053\uffdd" +
    "\055\uffdd\001\002\000\004\006\115\001\002\000\026\011" +
    "\uffe2\015\uffe2\017\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\046\uffe2\053\uffe2\055\uffe2\001\002\000\026\011\uffe8\015" +
    "\uffe8\017\uffe8\024\uffe8\026\uffe8\027\uffe8\030\uffe8\046\uffe8" +
    "\053\uffe8\055\uffe8\001\002\000\026\011\uffde\015\uffde\017" +
    "\uffde\024\uffde\026\uffde\027\uffde\030\uffde\046\uffde\053\uffde" +
    "\055\uffde\001\002\000\026\011\uffe0\015\uffe0\017\uffe0\024" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\046\uffe0\053\uffe0\055\uffe0" +
    "\001\002\000\016\034\120\035\116\036\121\037\124\040" +
    "\117\044\uffd9\001\002\000\006\006\uffe6\045\uffe6\001\002" +
    "\000\006\006\uffe3\045\uffe3\001\002\000\006\006\uffe7\045" +
    "\uffe7\001\002\000\006\006\uffe4\045\uffe4\001\002\000\004" +
    "\044\126\001\002\000\006\006\104\045\110\001\002\000" +
    "\006\006\uffe5\045\uffe5\001\002\000\030\011\uffda\015\uffda" +
    "\017\uffda\024\uffda\026\uffda\027\uffda\030\uffda\044\uffda\046" +
    "\uffda\053\uffda\055\uffda\001\002\000\042\011\uffd9\015\uffd9" +
    "\017\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9\034\120\035" +
    "\116\036\121\037\124\040\117\044\uffd9\046\uffd9\053\uffd9" +
    "\055\uffd9\001\002\000\030\011\uffd8\015\uffd8\017\uffd8\024" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\044\uffd8\046\uffd8\053\uffd8" +
    "\055\uffd8\001\002\000\030\011\uffdb\015\uffdb\017\uffdb\024" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\044\uffdb\046\uffdb\053\uffdb" +
    "\055\uffdb\001\002\000\030\011\uffdc\015\uffdc\017\uffdc\024" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\044\uffdc\046\uffdc\053\uffdc" +
    "\055\uffdc\001\002\000\010\004\135\006\136\053\133\001" +
    "\002\000\006\033\150\044\uffcc\001\002\000\004\044\137" +
    "\001\002\000\004\044\uffce\001\002\000\004\044\uffcd\001" +
    "\002\000\004\012\140\001\002\000\004\047\141\001\002" +
    "\000\026\011\023\015\036\017\017\024\020\026\030\027" +
    "\027\030\016\046\ufff4\053\024\055\037\001\002\000\004" +
    "\046\143\001\002\000\030\011\uffd1\013\144\015\uffd1\017" +
    "\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\046\uffd1\053\uffd1" +
    "\055\uffd1\001\002\000\004\047\145\001\002\000\026\011" +
    "\023\015\036\017\017\024\020\026\030\027\027\030\016" +
    "\046\ufff4\053\024\055\037\001\002\000\004\046\147\001" +
    "\002\000\026\011\uffd0\015\uffd0\017\uffd0\024\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\046\uffd0\053\uffd0\055\uffd0\001\002\000" +
    "\012\004\152\005\153\006\154\053\151\001\002\000\004" +
    "\044\uffc8\001\002\000\004\044\uffc9\001\002\000\004\044" +
    "\uffca\001\002\000\004\044\uffcb\001\002\000\026\011\uffd2" +
    "\015\uffd2\017\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2\046" +
    "\uffd2\053\uffd2\055\uffd2\001\002\000\010\004\135\006\136" +
    "\053\133\001\002\000\004\044\160\001\002\000\004\047" +
    "\161\001\002\000\026\011\023\015\036\017\017\024\020" +
    "\026\030\027\027\030\016\046\ufff4\053\024\055\037\001" +
    "\002\000\004\046\163\001\002\000\026\011\uffcf\015\uffcf" +
    "\017\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf\046\uffcf\053" +
    "\uffcf\055\uffcf\001\002\000\030\011\uffea\015\uffea\017\uffea" +
    "\024\uffea\026\uffea\027\uffea\030\uffea\046\uffea\052\165\053" +
    "\uffea\055\uffea\001\002\000\016\004\105\005\114\006\104" +
    "\007\106\045\110\053\111\001\002\000\026\011\uffe9\015" +
    "\uffe9\017\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9\046\uffe9" +
    "\053\uffe9\055\uffe9\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002\000\004\053\172\001\002\000\004" +
    "\045\173\001\002\000\006\044\ufff8\053\174\001\002\000" +
    "\004\042\213\001\002\000\004\044\ufff9\001\002\000\004" +
    "\044\177\001\002\000\004\052\200\001\002\000\014\026" +
    "\030\027\027\030\016\047\201\055\037\001\002\000\026" +
    "\011\023\015\036\017\017\024\020\026\030\027\027\030" +
    "\016\046\ufff4\053\024\055\037\001\002\000\004\047\203" +
    "\001\002\000\026\011\023\015\036\017\017\024\020\026" +
    "\030\027\027\030\016\046\ufff4\053\024\055\037\001\002" +
    "\000\004\046\205\001\002\000\006\002\ufffa\023\171\001" +
    "\002\000\004\002\ufffc\001\002\000\004\002\ufffb\001\002" +
    "\000\004\046\211\001\002\000\006\002\ufffa\023\171\001" +
    "\002\000\004\002\ufffd\001\002\000\012\026\030\027\027" +
    "\030\016\055\037\001\002\000\006\043\215\044\ufff7\001" +
    "\002\000\006\044\ufff8\053\174\001\002\000\004\044\ufff6" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\006\002\004\003\003\001\001\000\004\010" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\004\025\006\037\013\014\014\034\015\024" +
    "\016\020\017\031\026\013\027\030\031\032\032\021\033" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\154\021\106\025" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\041\005\040\006\037\013\014\014\034\015\024\016" +
    "\020\017\031\026\013\027\030\031\032\032\021\033\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\043\014\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\004\060\006\037\013\014\014\034\015\024" +
    "\016\020\017\031\026\013\027\030\031\032\032\021\033" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\071" +
    "\006\037\013\014\014\034\015\024\016\020\017\031\026" +
    "\013\027\030\031\032\032\021\033\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\004\077\006\037\013\014" +
    "\014\034\015\024\016\020\017\031\026\013\027\030\031" +
    "\032\032\021\033\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\111\021\106\025" +
    "\112\001\001\000\006\022\130\024\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\121\024\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\126\023\127" +
    "\024\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\004\141\006\037" +
    "\013\014\014\034\015\024\016\020\017\031\026\013\027" +
    "\030\031\032\032\021\033\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\145\006" +
    "\037\013\014\014\034\015\024\016\020\017\031\026\013" +
    "\027\030\031\032\032\021\033\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\004\161\006\037\013\014\014" +
    "\034\015\024\016\020\017\031\026\013\027\030\031\032" +
    "\032\021\033\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\165\021\106\025\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\175" +
    "\012\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\201\014\034" +
    "\001\001\000\032\004\207\006\037\013\014\014\034\015" +
    "\024\016\020\017\031\026\013\027\030\031\032\032\021" +
    "\033\033\001\001\000\002\001\001\000\032\004\203\006" +
    "\037\013\014\014\034\015\024\016\020\017\031\026\013" +
    "\027\030\031\032\032\021\033\033\001\001\000\002\001" +
    "\001\000\006\007\205\010\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\211\010" +
    "\206\001\001\000\002\001\001\000\006\013\213\014\034" +
    "\001\001\000\002\001\001\000\006\011\215\012\174\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Node root;

    public int cont = 0;

    public void syntax_error(Symbol s){ 
       System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
       System.out.println("Sintaxis truena");
    } 

    /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("CUP detecto un error de syntaxis en " + s.left + " column " + s.right);
    } */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= main function_list 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= main 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main ::= FUNCTION MAIN PARIZQ PARDER ASSIGNMENT BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function_list ::= FUNCTION ID PARIZQ parameter PARDER ASSIGNMENT BRACKETIZQ body BRACKETDER function 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function_list",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_list ::= FUNCTION ID PARIZQ parameter PARDER ASSIGNMENT type BRACKETIZQ body BRACKETDER function 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function_list",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function ::= function_list 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameter ::= b_parameter 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameter",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parameter ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameter",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // b_parameter ::= ID COLON type 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("b_parameter",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // b_parameter ::= ID COLON type COMMA parameter 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("b_parameter",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // body ::= proposition b_body 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body ::= 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b_body ::= body 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("b_body",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // proposition ::= simpleDeclaration 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // proposition ::= declaration_assign 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // proposition ::= assignment 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // proposition ::= return 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // proposition ::= ifStatement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // proposition ::= whileStatement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // proposition ::= forStatement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // proposition ::= switchStatement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // simpleDeclaration ::= type ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("simpleDeclaration",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaration_assign ::= type ID ASSIGNMENT value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_assign",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assignment ::= ID ASSIGNMENT value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assignment",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // signo ::= SUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("signo",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // signo ::= RES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("signo",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // signo ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("signo",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // signo ::= MULT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("signo",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // signo ::= MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("signo",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // value ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // value ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // value ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // value ::= EMPTY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // value ::= array_value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // value ::= aritmetic_expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // aritmetic_expression ::= INT b_aritmetic_expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("aritmetic_expression",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // aritmetic_expression ::= PARIZQ INT b_aritmetic_expression PARDER c_aritmetic_expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("aritmetic_expression",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // b_aritmetic_expression ::= signo aritmetic_expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("b_aritmetic_expression",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // b_aritmetic_expression ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("b_aritmetic_expression",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // c_aritmetic_expression ::= b_aritmetic_expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("c_aritmetic_expression",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= NUMBER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= array_type 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // array_type ::= ARRAY SBRACKETIZQ type SBRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("array_type",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // return ::= COMEBACK value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("return",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ifStatement ::= IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ifStatement",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ifStatement ::= IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER ELSE BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ifStatement",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // whileStatement ::= WHILE PARIZQ desicion PARDER BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("whileStatement",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // desicion ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // desicion ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // desicion ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // desicion ::= ID OPREL INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // desicion ::= ID OPREL CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // desicion ::= ID OPREL BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // desicion ::= ID OPREL ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // forStatement ::= FOR PARIZQ ID ASSIGNMENT INT TO INT DELIMETER INT PARDER BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("forStatement",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // forStatement ::= FOR PARIZQ ID ASSIGNMENT ID TO INT DELIMETER INT PARDER BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("forStatement",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // forStatement ::= FOR PARIZQ ID ASSIGNMENT ID TO ID DELIMETER INT PARDER BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("forStatement",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
