
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\012\000\002\010\014\000\002\010\015" +
    "\000\002\007\003\000\002\007\002\000\002\011\003\000" +
    "\002\011\002\000\002\012\005\000\002\012\007\000\002" +
    "\004\004\000\002\004\002\000\002\005\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\015\004\000\002\016\006\000\002\017\005\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\006\000\002\022\012\000" +
    "\002\022\016\000\002\021\011\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\002" +
    "\000\002\024\021\000\002\024\021\000\002\024\017\000" +
    "\002\024\017" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\022\006\001\002\000\006\002\uffff\022" +
    "\157\001\002\000\004\002\155\001\002\000\004\010\007" +
    "\001\002\000\004\044\010\001\002\000\004\043\011\001" +
    "\002\000\004\051\012\001\002\000\004\046\013\001\002" +
    "\000\024\011\021\015\034\016\017\025\027\026\026\027" +
    "\015\045\ufff4\052\023\054\035\001\002\000\024\011\uffee" +
    "\015\uffee\016\uffee\025\uffee\026\uffee\027\uffee\045\uffee\052" +
    "\uffee\054\uffee\001\002\000\014\042\uffe1\043\uffe1\046\uffe1" +
    "\047\uffe1\052\uffe1\001\002\000\004\052\152\001\002\000" +
    "\004\044\144\001\002\000\024\011\ufff1\015\ufff1\016\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\045\ufff1\052\ufff1\054\ufff1\001" +
    "\002\000\004\044\121\001\002\000\024\011\uffec\015\uffec" +
    "\016\uffec\025\uffec\026\uffec\027\uffec\045\uffec\052\uffec\054" +
    "\uffec\001\002\000\004\051\113\001\002\000\024\011\ufff2" +
    "\015\ufff2\016\ufff2\025\ufff2\026\ufff2\027\ufff2\045\ufff2\052" +
    "\ufff2\054\ufff2\001\002\000\004\045\112\001\002\000\014" +
    "\042\uffe2\043\uffe2\046\uffe2\047\uffe2\052\uffe2\001\002\000" +
    "\014\042\uffe4\043\uffe4\046\uffe4\047\uffe4\052\uffe4\001\002" +
    "\000\024\011\uffef\015\uffef\016\uffef\025\uffef\026\uffef\027" +
    "\uffef\045\uffef\052\uffef\054\uffef\001\002\000\024\011\ufff0" +
    "\015\ufff0\016\ufff0\025\ufff0\026\ufff0\027\ufff0\045\ufff0\052" +
    "\ufff0\054\ufff0\001\002\000\024\011\uffed\015\uffed\016\uffed" +
    "\025\uffed\026\uffed\027\uffed\045\uffed\052\uffed\054\uffed\001" +
    "\002\000\014\042\uffe3\043\uffe3\046\uffe3\047\uffe3\052\uffe3" +
    "\001\002\000\004\044\044\001\002\000\004\050\041\001" +
    "\002\000\024\011\021\015\034\016\017\025\027\026\026" +
    "\027\015\045\ufff4\052\023\054\035\001\002\000\004\045" +
    "\ufff5\001\002\000\004\045\ufff3\001\002\000\012\025\027" +
    "\026\026\027\015\054\035\001\002\000\004\047\043\001" +
    "\002\000\014\042\uffe0\043\uffe0\046\uffe0\047\uffe0\052\uffe0" +
    "\001\002\000\004\052\045\001\002\000\006\051\046\053" +
    "\047\001\002\000\004\006\070\001\002\000\004\052\050" +
    "\001\002\000\004\032\051\001\002\000\006\006\053\052" +
    "\052\001\002\000\004\053\062\001\002\000\004\053\054" +
    "\001\002\000\004\006\055\001\002\000\004\043\056\001" +
    "\002\000\004\046\057\001\002\000\024\011\021\015\034" +
    "\016\017\025\027\026\026\027\015\045\ufff4\052\023\054" +
    "\035\001\002\000\004\045\061\001\002\000\024\011\uffd2" +
    "\015\uffd2\016\uffd2\025\uffd2\026\uffd2\027\uffd2\045\uffd2\052" +
    "\uffd2\054\uffd2\001\002\000\004\006\063\001\002\000\004" +
    "\043\064\001\002\000\004\046\065\001\002\000\024\011" +
    "\021\015\034\016\017\025\027\026\026\027\015\045\ufff4" +
    "\052\023\054\035\001\002\000\004\045\067\001\002\000" +
    "\024\011\uffd1\015\uffd1\016\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\045\uffd1\052\uffd1\054\uffd1\001\002\000\004\053\071\001" +
    "\002\000\004\052\072\001\002\000\004\032\073\001\002" +
    "\000\006\006\075\052\074\001\002\000\004\053\104\001" +
    "\002\000\004\053\076\001\002\000\004\006\077\001\002" +
    "\000\004\043\100\001\002\000\004\046\101\001\002\000" +
    "\024\011\021\015\034\016\017\025\027\026\026\027\015" +
    "\045\ufff4\052\023\054\035\001\002\000\004\045\103\001" +
    "\002\000\024\011\uffd4\015\uffd4\016\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\045\uffd4\052\uffd4\054\uffd4\001\002\000\004\006" +
    "\105\001\002\000\004\043\106\001\002\000\004\046\107" +
    "\001\002\000\024\011\021\015\034\016\017\025\027\026" +
    "\026\027\015\045\ufff4\052\023\054\035\001\002\000\004" +
    "\045\111\001\002\000\024\011\uffd3\015\uffd3\016\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\045\uffd3\052\uffd3\054\uffd3\001\002" +
    "\000\006\002\ufffe\022\ufffe\001\002\000\012\004\115\005" +
    "\117\006\120\007\114\001\002\000\024\011\uffe5\015\uffe5" +
    "\016\uffe5\025\uffe5\026\uffe5\027\uffe5\045\uffe5\052\uffe5\054" +
    "\uffe5\001\002\000\024\011\uffe7\015\uffe7\016\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\045\uffe7\052\uffe7\054\uffe7\001\002\000" +
    "\024\011\uffe9\015\uffe9\016\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\045\uffe9\052\uffe9\054\uffe9\001\002\000\024\011\uffe6\015" +
    "\uffe6\016\uffe6\025\uffe6\026\uffe6\027\uffe6\045\uffe6\052\uffe6" +
    "\054\uffe6\001\002\000\024\011\uffe8\015\uffe8\016\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\045\uffe8\052\uffe8\054\uffe8\001\002" +
    "\000\012\004\124\006\125\043\uffd5\052\122\001\002\000" +
    "\006\032\137\043\uffda\001\002\000\004\043\126\001\002" +
    "\000\004\043\uffdc\001\002\000\004\043\uffdb\001\002\000" +
    "\004\012\127\001\002\000\004\046\130\001\002\000\024" +
    "\011\021\015\034\016\017\025\027\026\026\027\015\045" +
    "\ufff4\052\023\054\035\001\002\000\004\045\132\001\002" +
    "\000\026\011\uffdf\013\133\015\uffdf\016\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\045\uffdf\052\uffdf\054\uffdf\001\002\000\004" +
    "\046\134\001\002\000\024\011\021\015\034\016\017\025" +
    "\027\026\026\027\015\045\ufff4\052\023\054\035\001\002" +
    "\000\004\045\136\001\002\000\024\011\uffde\015\uffde\016" +
    "\uffde\025\uffde\026\uffde\027\uffde\045\uffde\052\uffde\054\uffde" +
    "\001\002\000\012\004\141\005\142\006\143\052\140\001" +
    "\002\000\004\043\uffd6\001\002\000\004\043\uffd7\001\002" +
    "\000\004\043\uffd8\001\002\000\004\043\uffd9\001\002\000" +
    "\012\004\124\006\125\043\uffd5\052\122\001\002\000\004" +
    "\043\146\001\002\000\004\046\147\001\002\000\024\011" +
    "\021\015\034\016\017\025\027\026\026\027\015\045\ufff4" +
    "\052\023\054\035\001\002\000\004\045\151\001\002\000" +
    "\024\011\uffdd\015\uffdd\016\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\045\uffdd\052\uffdd\054\uffdd\001\002\000\026\011\uffeb\015" +
    "\uffeb\016\uffeb\025\uffeb\026\uffeb\027\uffeb\045\uffeb\051\153" +
    "\052\uffeb\054\uffeb\001\002\000\012\004\115\005\117\006" +
    "\120\007\114\001\002\000\024\011\uffea\015\uffea\016\uffea" +
    "\025\uffea\026\uffea\027\uffea\045\uffea\052\uffea\054\uffea\001" +
    "\002\000\004\002\001\001\002\000\004\002\000\001\002" +
    "\000\004\052\160\001\002\000\004\044\161\001\002\000" +
    "\006\043\ufff8\052\162\001\002\000\004\041\201\001\002" +
    "\000\004\043\ufff9\001\002\000\004\043\165\001\002\000" +
    "\004\051\166\001\002\000\014\025\027\026\026\027\015" +
    "\046\167\054\035\001\002\000\024\011\021\015\034\016" +
    "\017\025\027\026\026\027\015\045\ufff4\052\023\054\035" +
    "\001\002\000\004\046\171\001\002\000\024\011\021\015" +
    "\034\016\017\025\027\026\026\027\015\045\ufff4\052\023" +
    "\054\035\001\002\000\004\045\173\001\002\000\006\002" +
    "\ufffa\022\157\001\002\000\004\002\ufffc\001\002\000\004" +
    "\002\ufffb\001\002\000\004\045\177\001\002\000\006\002" +
    "\ufffa\022\157\001\002\000\004\002\ufffd\001\002\000\012" +
    "\025\027\026\026\027\015\054\035\001\002\000\006\042" +
    "\203\043\ufff7\001\002\000\006\043\ufff8\052\162\001\002" +
    "\000\004\043\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\006\002\004\003\003\001\001\000\004\010" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\024\006\035\013\015\014\032\015\023" +
    "\016\017\017\030\021\013\022\027\024\031\025\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\037\005" +
    "\036\006\035\013\015\014\032\015\023\016\017\017\030" +
    "\021\013\022\027\024\031\025\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\041\014\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\057\006\035\013\015\014\032\015\023\016" +
    "\017\017\030\021\013\022\027\024\031\025\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\065\006\035" +
    "\013\015\014\032\015\023\016\017\017\030\021\013\022" +
    "\027\024\031\025\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\101\006\035\013\015\014\032\015\023\016\017" +
    "\017\030\021\013\022\027\024\031\025\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\107\006\035\013" +
    "\015\014\032\015\023\016\017\017\030\021\013\022\027" +
    "\024\031\025\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\130" +
    "\006\035\013\015\014\032\015\023\016\017\017\030\021" +
    "\013\022\027\024\031\025\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\134\006" +
    "\035\013\015\014\032\015\023\016\017\017\030\021\013" +
    "\022\027\024\031\025\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\147\006\035\013\015\014\032\015\023\016\017\017" +
    "\030\021\013\022\027\024\031\025\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\163\012\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\167\014" +
    "\032\001\001\000\030\004\175\006\035\013\015\014\032" +
    "\015\023\016\017\017\030\021\013\022\027\024\031\025" +
    "\021\001\001\000\002\001\001\000\030\004\171\006\035" +
    "\013\015\014\032\015\023\016\017\017\030\021\013\022" +
    "\027\024\031\025\021\001\001\000\002\001\001\000\006" +
    "\007\173\010\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\177\010\174\001\001" +
    "\000\002\001\001\000\006\013\201\014\032\001\001\000" +
    "\002\001\001\000\006\011\203\012\162\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Node root;

    public int cont = 0;

    public void syntax_error(Symbol s){ 
       System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
       System.out.println("Sintaxis truena");
    } 

    /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("CUP detecto un error de syntaxis en " + s.left + " column " + s.right);
    } */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= main function_list 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= main 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main ::= FUNCTION MAIN PARIZQ PARDER ASSIGNMENT BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function_list ::= FUNCTION ID PARIZQ parameter PARDER ASSIGNMENT BRACKETIZQ body BRACKETDER function 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function_list",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_list ::= FUNCTION ID PARIZQ parameter PARDER ASSIGNMENT type BRACKETIZQ body BRACKETDER function 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function_list",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function ::= function_list 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameter ::= b_parameter 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameter",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parameter ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parameter",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // b_parameter ::= ID COLON type 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("b_parameter",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // b_parameter ::= ID COLON type COMMA parameter 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("b_parameter",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // body ::= proposition b_body 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body ::= 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b_body ::= body 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("b_body",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // proposition ::= simpleDeclaration 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // proposition ::= declaration_assign 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // proposition ::= assignment 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // proposition ::= ifStatement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // proposition ::= whileStatement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // proposition ::= forStatement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // proposition ::= switchStatement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // simpleDeclaration ::= type ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("simpleDeclaration",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration_assign ::= type ID ASSIGNMENT value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration_assign",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assignment ::= ID ASSIGNMENT value 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assignment",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // value ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // value ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // value ::= CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // value ::= EMPTY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= NUMBER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= array_type 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // array_type ::= ARRAY SBRACKETIZQ type SBRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("array_type",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ifStatement ::= IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ifStatement",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ifStatement ::= IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER ELSE BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ifStatement",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // whileStatement ::= WHILE PARIZQ desicion PARDER BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("whileStatement",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // desicion ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // desicion ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // desicion ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // desicion ::= ID OPREL INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // desicion ::= ID OPREL CHAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // desicion ::= ID OPREL BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // desicion ::= ID OPREL ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // desicion ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("desicion",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // forStatement ::= FOR PARIZQ ID ASSIGNMENT INT DELIMETER ID OPREL INT DELIMETER INT PARDER BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("forStatement",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-14)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // forStatement ::= FOR PARIZQ ID ASSIGNMENT INT DELIMETER ID OPREL ID DELIMETER INT PARDER BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("forStatement",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-14)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // forStatement ::= FOR PARIZQ ID DELIMETER ID OPREL INT DELIMETER INT PARDER BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("forStatement",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // forStatement ::= FOR PARIZQ ID DELIMETER ID OPREL ID DELIMETER INT PARDER BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("forStatement",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
