
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\004\000\002\003" +
    "\012\000\002\010\004\000\002\010\002\000\002\007\013" +
    "\000\002\007\015\000\002\011\004\000\002\011\002\000" +
    "\002\012\005\000\002\012\006\000\002\004\004\000\002" +
    "\004\002\000\002\006\004\000\002\006\006\000\002\006" +
    "\005\000\002\006\006\000\002\006\007\000\002\006\006" +
    "\000\002\006\007\000\002\006\003\000\002\006\012\000" +
    "\002\006\003\000\002\006\012\000\002\037\010\000\002" +
    "\030\004\000\002\030\002\000\002\040\012\000\002\013" +
    "\004\000\002\013\003\000\002\014\004\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\025\005\000\002\026\004\000\002\026\003" +
    "\000\002\027\004\000\002\035\011\000\002\036\012\000" +
    "\002\032\012\000\002\032\013\000\002\032\013\000\002" +
    "\031\006\000\002\034\004\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\006" +
    "\000\002\041\006\000\002\033\005\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\022\006\001\002\000\006\002\ufffd\022" +
    "\203\001\002\000\004\002\200\001\002\000\004\010\007" +
    "\001\002\000\004\044\010\001\002\000\004\043\011\001" +
    "\002\000\004\051\012\001\002\000\004\046\013\001\002" +
    "\000\032\011\025\014\017\016\014\017\031\024\021\025" +
    "\023\026\016\030\020\035\033\045\ufff5\052\026\054\022" +
    "\001\002\000\004\044\171\001\002\000\034\011\uffed\014" +
    "\uffed\016\uffed\017\uffed\023\uffed\024\uffed\025\uffed\026\uffed" +
    "\030\uffed\035\uffed\045\uffed\052\uffed\054\uffed\001\002\000" +
    "\014\042\uffc9\043\uffc9\046\uffc9\047\uffc9\052\uffc9\001\002" +
    "\000\004\044\153\001\002\000\004\044\150\001\002\000" +
    "\014\042\uffcc\043\uffcc\046\uffcc\047\uffcc\052\uffcc\001\002" +
    "\000\004\050\145\001\002\000\014\042\uffca\043\uffca\046" +
    "\uffca\047\uffca\052\uffca\001\002\000\004\045\144\001\002" +
    "\000\004\044\123\001\002\000\004\051\116\001\002\000" +
    "\004\052\113\001\002\000\034\011\uffeb\014\uffeb\016\uffeb" +
    "\017\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb\035" +
    "\uffeb\045\uffeb\052\uffeb\054\uffeb\001\002\000\004\044\064" +
    "\001\002\000\014\042\uffcb\043\uffcb\046\uffcb\047\uffcb\052" +
    "\uffcb\001\002\000\004\052\036\001\002\000\034\011\025" +
    "\014\017\016\014\017\031\023\ufff5\024\021\025\023\026" +
    "\016\030\020\035\033\045\ufff5\052\026\054\022\001\002" +
    "\000\006\023\ufff6\045\ufff6\001\002\000\004\044\037\001" +
    "\002\000\020\004\043\005\052\006\041\007\044\043\047" +
    "\050\045\052\046\001\002\000\004\043\063\001\002\000" +
    "\050\011\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\030\uffd8\031\uffd8\035\uffd8\042" +
    "\uffd8\043\uffd8\045\uffd8\047\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\001\002\000\016\004\043\005\052\006\041\007\044\050" +
    "\045\052\046\001\002\000\050\011\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\030" +
    "\uffdc\031\uffdc\035\uffdc\042\uffdc\043\uffdc\045\uffdc\047\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\001\002\000\050\011\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\030\uffda\031\uffda\035\uffda\042\uffda\043\uffda\045" +
    "\uffda\047\uffda\052\uffda\053\uffda\054\uffda\001\002\000\016" +
    "\004\043\005\052\006\041\007\044\050\045\052\046\001" +
    "\002\000\050\011\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd\031\uffdd\035" +
    "\uffdd\042\uffdd\043\uffdd\045\uffdd\047\uffdd\052\uffdd\053\uffdd" +
    "\054\uffdd\001\002\000\034\011\ufff1\014\ufff1\016\ufff1\017" +
    "\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\030\ufff1\035\ufff1" +
    "\045\ufff1\052\ufff1\054\ufff1\001\002\000\006\042\053\043" +
    "\uffe4\001\002\000\050\011\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\030\uffd9\031" +
    "\uffd9\035\uffd9\042\uffd9\043\uffd9\045\uffd9\047\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\001\002\000\050\011\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\030\uffdb\031\uffdb\035\uffdb\042\uffdb\043\uffdb\045\uffdb\047" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\001\002\000\016\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\050\uffe3\052\uffe3\001\002\000" +
    "\004\047\061\001\002\000\016\004\043\005\052\006\041" +
    "\007\044\050\045\052\046\001\002\000\006\042\057\047" +
    "\uffd5\001\002\000\016\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\050\uffd4\052\uffd4\001\002\000\004\047\uffd6\001\002\000" +
    "\050\011\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031\uffd7\035\uffd7\042" +
    "\uffd7\043\uffd7\045\uffd7\047\uffd7\052\uffd7\053\uffd7\054\uffd7" +
    "\001\002\000\004\043\uffe5\001\002\000\034\011\ufff0\014" +
    "\ufff0\016\ufff0\017\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\030\ufff0\035\ufff0\045\ufff0\052\ufff0\054\ufff0\001\002\000" +
    "\004\052\065\001\002\000\004\043\066\001\002\000\004" +
    "\012\067\001\002\000\004\046\070\001\002\000\006\020" +
    "\074\021\uffe7\001\002\000\004\045\112\001\002\000\004" +
    "\021\105\001\002\000\006\020\074\021\uffe7\001\002\000" +
    "\004\044\075\001\002\000\016\004\043\005\052\006\041" +
    "\007\044\050\045\052\046\001\002\000\004\043\077\001" +
    "\002\000\004\041\100\001\002\000\004\046\101\001\002" +
    "\000\032\011\025\014\017\016\014\017\031\024\021\025" +
    "\023\026\016\030\020\035\033\045\ufff5\052\026\054\022" +
    "\001\002\000\004\045\103\001\002\000\006\020\uffe6\021" +
    "\uffe6\001\002\000\004\021\uffe8\001\002\000\004\041\106" +
    "\001\002\000\004\046\107\001\002\000\032\011\025\014" +
    "\017\016\014\017\031\024\021\025\023\026\016\030\020" +
    "\035\033\045\ufff5\052\026\054\022\001\002\000\004\045" +
    "\111\001\002\000\004\045\uffe9\001\002\000\034\011\uffea" +
    "\014\uffea\016\uffea\017\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\030\uffea\035\uffea\045\uffea\052\uffea\054\uffea\001\002" +
    "\000\036\011\ufff4\014\ufff4\016\ufff4\017\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\030\ufff4\035\ufff4\045\ufff4\051\114" +
    "\052\ufff4\054\ufff4\001\002\000\016\004\043\005\052\006" +
    "\041\007\044\050\045\052\046\001\002\000\034\011\ufff3" +
    "\014\ufff3\016\ufff3\017\ufff3\023\ufff3\024\ufff3\025\ufff3\026" +
    "\ufff3\030\ufff3\035\ufff3\045\ufff3\052\ufff3\054\ufff3\001\002" +
    "\000\020\004\043\005\052\006\041\007\044\027\117\050" +
    "\045\052\046\001\002\000\004\044\121\001\002\000\034" +
    "\011\ufff2\014\ufff2\016\ufff2\017\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\030\ufff2\035\ufff2\045\ufff2\052\ufff2\054\ufff2" +
    "\001\002\000\004\043\122\001\002\000\034\011\uffee\014" +
    "\uffee\016\uffee\017\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\030\uffee\035\uffee\045\uffee\052\uffee\054\uffee\001\002\000" +
    "\016\004\043\005\052\006\041\007\044\050\045\052\046" +
    "\001\002\000\004\043\130\001\002\000\006\031\126\043" +
    "\uffc5\001\002\000\016\004\043\005\052\006\041\007\044" +
    "\050\045\052\046\001\002\000\004\043\uffc6\001\002\000" +
    "\004\012\131\001\002\000\004\046\132\001\002\000\032" +
    "\011\025\014\017\016\014\017\031\024\021\025\023\026" +
    "\016\030\020\035\033\045\ufff5\052\026\054\022\001\002" +
    "\000\004\045\134\001\002\000\036\011\uffd1\013\136\014" +
    "\uffd1\016\uffd1\017\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\030\uffd1\035\uffd1\045\uffd1\052\uffd1\054\uffd1\001\002\000" +
    "\034\011\uffd0\014\uffd0\016\uffd0\017\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\030\uffd0\035\uffd0\045\uffd0\052\uffd0\054" +
    "\uffd0\001\002\000\006\011\025\046\140\001\002\000\034" +
    "\011\uffcf\014\uffcf\016\uffcf\017\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\030\uffcf\035\uffcf\045\uffcf\052\uffcf\054\uffcf" +
    "\001\002\000\032\011\025\014\017\016\014\017\031\024" +
    "\021\025\023\026\016\030\020\035\033\045\ufff5\052\026" +
    "\054\022\001\002\000\034\011\uffcd\014\uffcd\016\uffcd\017" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\030\uffcd\035\uffcd" +
    "\045\uffcd\052\uffcd\054\uffcd\001\002\000\004\045\143\001" +
    "\002\000\034\011\uffce\014\uffce\016\uffce\017\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\030\uffce\035\uffce\045\uffce\052" +
    "\uffce\054\uffce\001\002\000\006\002\uffff\022\uffff\001\002" +
    "\000\012\024\021\025\023\026\016\054\022\001\002\000" +
    "\004\047\147\001\002\000\014\042\uffc8\043\uffc8\046\uffc8" +
    "\047\uffc8\052\uffc8\001\002\000\016\004\043\005\052\006" +
    "\041\007\044\050\045\052\046\001\002\000\004\043\152" +
    "\001\002\000\034\011\uffef\014\uffef\016\uffef\017\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\030\uffef\035\uffef\045\uffef" +
    "\052\uffef\054\uffef\001\002\000\004\052\154\001\002\000" +
    "\004\051\163\001\002\000\004\043\156\001\002\000\004" +
    "\012\157\001\002\000\004\046\160\001\002\000\032\011" +
    "\025\014\017\016\014\017\031\024\021\025\023\026\016" +
    "\030\020\035\033\045\ufff5\052\026\054\022\001\002\000" +
    "\004\045\162\001\002\000\034\011\uffd2\014\uffd2\016\uffd2" +
    "\017\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2\035" +
    "\uffd2\045\uffd2\052\uffd2\054\uffd2\001\002\000\016\004\043" +
    "\005\052\006\041\007\044\050\045\052\046\001\002\000" +
    "\004\015\165\001\002\000\016\004\043\005\052\006\041" +
    "\007\044\050\045\052\046\001\002\000\004\053\167\001" +
    "\002\000\016\004\043\005\052\006\041\007\044\050\045" +
    "\052\046\001\002\000\004\043\uffd3\001\002\000\016\004" +
    "\043\005\052\006\041\007\044\050\045\052\046\001\002" +
    "\000\004\043\173\001\002\000\004\012\174\001\002\000" +
    "\004\046\175\001\002\000\032\011\025\014\017\016\014" +
    "\017\031\024\021\025\023\026\016\030\020\035\033\045" +
    "\ufff5\052\026\054\022\001\002\000\004\045\177\001\002" +
    "\000\034\011\uffec\014\uffec\016\uffec\017\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\030\uffec\035\uffec\045\uffec\052\uffec" +
    "\054\uffec\001\002\000\004\002\001\001\002\000\006\002" +
    "\ufffd\022\203\001\002\000\004\002\000\001\002\000\004" +
    "\052\204\001\002\000\004\044\205\001\002\000\006\043" +
    "\ufff9\052\206\001\002\000\004\041\230\001\002\000\006" +
    "\043\ufff9\052\206\001\002\000\004\043\211\001\002\000" +
    "\004\051\212\001\002\000\014\024\021\025\023\026\016" +
    "\046\213\054\022\001\002\000\032\011\025\014\017\016" +
    "\014\017\031\024\021\025\023\026\016\030\020\035\033" +
    "\045\ufff5\052\026\054\022\001\002\000\004\046\215\001" +
    "\002\000\032\011\025\014\017\016\014\017\031\023\ufff5" +
    "\024\021\025\023\026\016\030\020\035\033\052\026\054" +
    "\022\001\002\000\004\023\220\001\002\000\004\045\224" +
    "\001\002\000\004\044\221\001\002\000\016\004\043\005" +
    "\052\006\041\007\044\050\045\052\046\001\002\000\004" +
    "\043\223\001\002\000\004\045\uffc7\001\002\000\006\002" +
    "\ufffb\022\ufffb\001\002\000\004\045\226\001\002\000\006" +
    "\002\ufffc\022\ufffc\001\002\000\004\043\ufffa\001\002\000" +
    "\012\024\021\025\023\026\016\054\022\001\002\000\010" +
    "\042\232\043\ufff8\052\ufff8\001\002\000\006\043\ufff7\052" +
    "\ufff7\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\006\002\004\003\003\001\001\000\006\007" +
    "\200\010\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\023\006\033\015\026\016\031" +
    "\032\014\036\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\034\006\033\015\026" +
    "\016\031\032\014\036\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\037\014\041\020\047\025\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\061\014\041\020\047\025\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\055\025\050\026\053\027" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\055\025\050\026\057" +
    "\027\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\071\037\070\040\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\103\040\072\001\001\000\002\001\001\000\006\020\075" +
    "\025\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\101\006\033\015\026\016\031" +
    "\032\014\036\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\107\006\033\015\026\016\031\032\014\036" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\114\025\050\001" +
    "\001\000\002\001\001\000\006\020\117\025\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\124\025\050\033\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\126\025" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\132\006\033\015\026\016\031\032" +
    "\014\036\027\001\001\000\002\001\001\000\006\031\134" +
    "\034\136\001\001\000\002\001\001\000\004\032\140\001" +
    "\001\000\002\001\001\000\016\004\141\006\033\015\026" +
    "\016\031\032\014\036\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\145\016\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\150\025\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\160\006\033\015\026\016\031\032\014\036" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\163\025\050\001\001\000\002\001\001\000\006\020" +
    "\165\025\050\001\001\000\002\001\001\000\006\020\167" +
    "\025\050\001\001\000\002\001\001\000\010\020\124\025" +
    "\050\033\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\175\006\033\015\026\016" +
    "\031\032\014\036\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\200\010\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\207\012\206\001\001\000\002\001\001\000" +
    "\006\011\226\012\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\213\016\031\001\001\000\016\004" +
    "\224\006\033\015\026\016\031\032\014\036\027\001\001" +
    "\000\002\001\001\000\016\004\215\006\033\015\026\016" +
    "\031\032\014\036\027\001\001\000\004\041\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\221\025" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\230\016\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Node father;
    public int cont = 0;
    public static int errores = 0;

    public void syntax_error(Symbol s){ 
       System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
       System.out.println("Sintaxis truena");
    } 

    /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("CUP detecto un error de syntaxis en " + s.left + " column " + s.right);
    } */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= main function_list 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      // CURRENT NODE
                Node node = new Node();
                node.setTag("INIT");
                node.setId(parser.cont);  
                parser.cont++;
                
                // MAIN
                node.setChild( (Node) m );

                // FUNCTION_LIST
                if(fl!=null) node.setChild((Node)fl);

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= FUNCTION MAIN PARIZQ PARDER ASSIGNMENT BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		      // CURRENT NODE
                Node node = new Node();
                node.setTag("MAIN");
                node.setId(parser.cont);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setId(parser.cont);
                id.setValue((String) m);
                node.setChild(id);

                // BODY
                if (b!=null) node.setChild( (Node) b );
                

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // function_list ::= function function_list 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
                // CURRENT NODE
                Node node = new Node();
                node.setTag("FUNCTION_LIST");
                node.setId(parser.cont);
                parser.cont++;

                // FUNCTION
                node.setChild((Node)f);

                if(fl!=null) node.setChild( ((Node)fl).getChildren() );                      
                
                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function_list ::= 
            {
              Object RESULT =null;
		

        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function ::= FUNCTION ID PARIZQ parameter PARDER ASSIGNMENT BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		      // CURRENT NODE
                Node node = new Node();
                node.setTag("FUNCTION");
                node.setId(parser.cont);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setId(parser.cont);
                parser.cont++;
                id.setValue( (String) i);
                node.setChild(id);

                // PARAMETER
                if (p!=null) node.setChild( (Node) p );
                
                // BODY
                if (b!=null) node.setChild( (Node) b );
                
                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function ::= FUNCTION ID PARIZQ parameter PARDER ASSIGNMENT type BRACKETIZQ body return BRACKETDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                // CURRENT NODE
                Node node = new Node();
                node.setTag("FUNCTION_WITH_RETURN");
                node.setId(parser.cont);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setId(parser.cont);
                parser.cont++;
                id.setValue( (String) i);
                node.setChild(id);
                
                // PARAMETER
                if (p!=null) node.setChild( (Node) p );
                
                // RETURN TYPE
                node.setChild( (Node) t );

                // BODY
                if (b!=null) {
                        Node n = (Node)b;
                        n.setChild((Node)r);
                        node.setChild(n);
                }else{
                        Node bo = new Node();
                        bo.setTag("BODY");
                        bo.setId(parser.cont);
                        parser.cont++;
                        bo.setChild((Node)r);
                        node.setChild(bo);
                }

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parameter ::= b_parameter parameter 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                // PROPOSITION
                Node node = new Node();
                node.setTag("PARAMETER_LIST");
                node.setId(parser.cont);
                parser.cont++;

                // PROPOSITION
                node.setChild( (Node) b );
        
                if(p!=null) node.setChild( ((Node)p).getChildren() );

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameter ::= 
            {
              Object RESULT =null;
		/*vacío*/
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // b_parameter ::= ID COLON type 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("PARAMETER");
                node.setId(parser.cont++);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue( (String) i);
                id.setId(parser.cont++);
                parser.cont++;
                
                node.setChild(id);

                // TYPE
                node.setChild( (Node)t);
                
                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b_parameter",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // b_parameter ::= ID COLON type COMMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Node node = new Node();
                node.setTag("PARAMETER");
                node.setId(parser.cont++);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue( (String) i);
                id.setId(parser.cont++);
                parser.cont++;
                
                node.setChild(id);

                // TYPE
                node.setChild( (Node)t);

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b_parameter",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // body ::= proposition body 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                // PROPOSITION
                Node node = new Node();
                node.setTag("BODY");
                node.setId(parser.cont);
                parser.cont++;

                // PROPOSITION
                node.setChild( (Node) p );
                
                if(b!=null){
                        node.setChild( ((Node)b).getChildren() );
                }
                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // body ::= 
            {
              Object RESULT =null;
		/*Vacío*/
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proposition ::= type ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
                // TYPE ID
                Node node = new Node();
                node.setTag("SIMPLE_DECLARATION");
                node.setId(parser.cont);
                parser.cont++;

                // TYPE
                node.setChild( (Node) t);

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue((String)i);
                id.setId(parser.cont);
                parser.cont++;

                node.setChild(id);

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // proposition ::= type ID ASSIGNMENT value 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                // TYPE ID = VALUE
                Node node = new Node();
                node.setTag("DECLARATION_ASSIGNATION");
                node.setId(parser.cont);
                parser.cont++;

                // TYPE
                node.setChild( (Node) t);

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue( (String) i);
                id.setId(parser.cont);
                parser.cont++;
                node.setChild(id);

                // ASSIGNMENT
                Node as = new Node();
                as.setTag("ASSIGNMENT");
                as.setValue( (String) a);
                as.setId(parser.cont);
                parser.cont++;
                node.setChild(as);

                // VALUE
                node.setChild( (Node) v);

                parser.father = node;
                RESULT = node;     
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // proposition ::= ID ASSIGNMENT value 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                // ID = VALUE
                Node node = new Node();
                node.setTag("ASSIGNMENT");
                node.setId(parser.cont);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue( (String) i);
                id.setId(parser.cont);
                node.setChild(id);

                // ASSIGNMENT
                Node as = new Node();
                as.setTag("ASSIGNMENT");
                as.setValue( (String) a);
                as.setId(parser.cont);
                parser.cont++;
                node.setChild(as);

                // VALUE
                node.setChild( (Node) v);

                parser.father = node;
                RESULT = node;   
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // proposition ::= CALL ID PARIZQ PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                // CALL FUNCTION()
                Node node = new Node();
                node.setTag("FUNCTION_CALL");
                node.setId(parser.cont);
                parser.cont++;

                // CALL
                Node call = new Node();
                call.setTag("CALL");
                call.setId(parser.cont);
                parser.cont++;
                node.setChild(call);

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue((String)i);
                id.setId(parser.cont);
                parser.cont++;
                node.setChild(id);

                parser.father = node;
                RESULT = node;   
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // proposition ::= CALL ID PARIZQ funCall_parameter PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                // CALL FUNCTION( VALUE, VALUE2, VALUE3 )
                Node node = new Node();
                node.setTag("FUNCTION_CALL");
                node.setId(parser.cont);
                parser.cont++;

                // CALL
                Node call = new Node();
                call.setTag("CALL");
                call.setId(parser.cont);
                parser.cont++;
                node.setChild(call);

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue((String)i);
                id.setId(parser.cont);
                parser.cont++;
                node.setChild(id);

                // PARAMETERS
                node.setChild( (Node) f);
                
                parser.father = node;
                RESULT = node; 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // proposition ::= OUTPUT PARIZQ value PARDER 
            {
              Object RESULT =null;
		int ouleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ouright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ou = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		      
                // output(ID)
                Node node = new Node();
                node.setTag("OUTPUT_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                // OUTPUT
                Node output = new Node();
                output.setTag("OUTPUT");
                output.setValue( (String) ou);
                output.setId(parser.cont);
                parser.cont++;
                node.setChild(output);

                // VALUE
                node.setChild((Node)v);

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // proposition ::= ID ASSIGNMENT INPUT PARIZQ PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ip = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                // id = input()
                Node node = new Node();
                node.setTag("INPUT_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setId(parser.cont);
                id.setValue( (String) i);
                parser.cont++;
                node.setChild(id);

                // ASSIGNMENT
                Node assignment = new Node();
                assignment.setTag("ASSIGNMENT");
                assignment.setValue( (String) a);
                assignment.setId(parser.cont);
                parser.cont++;
                node.setChild(assignment);

                // INPUT
                Node input = new Node();
                input.setTag("INPUT");
                input.setValue( (String) ip);
                input.setId(parser.cont);
                parser.cont++;
                node.setChild(input);

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // proposition ::= ifStatement 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = (Node)i;
                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // proposition ::= WHILE PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                // while () then {}
                Node node = new Node();
                node.setTag("WHILE_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                // WHILE
                Node wh_s = new Node();
                wh_s.setTag("WHILE");
                wh_s.setValue( (String) w);
                wh_s.setId(parser.cont);
                parser.cont++;
                node.setChild(wh_s);

                // DESICION
                node.setChild((Node)d);

                // THEN
                Node th = new Node();
                th.setTag("THEN");
                th.setValue( (String) t);
                th.setId(parser.cont);
                parser.cont++;
                node.setChild(th);

                // BODY
                if (b!=null) node.setChild( (Node) b );

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // proposition ::= forStatement 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = (Node)f;
                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // proposition ::= SWITCH PARIZQ ID PARDER THEN BRACKETIZQ switch_body BRACKETDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object sb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		      
                Node node = new Node();
                node.setTag("SWITCH_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;
                // SWITCH
                Node sw = new Node();
                sw.setTag("SWITCH");
                sw.setId(parser.cont);
                parser.cont++;

                node.setChild(sw);
                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue((String)i);
                id.setId(parser.cont);
                parser.cont++;

                node.setChild(id);
                
                Node th = new Node();
                th.setTag("THEN");
                th.setId(parser.cont);
                parser.cont++;

                node.setChild(th);

                // SWTICH BODY
                node.setChild((Node)sb);

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // switch_body ::= case_switch_list DEFAULT COLON BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Node nodo = new Node();
                nodo.setTag("SWITCH_BODY");
                nodo.setId(parser.cont);
                parser.cont++;

                if (c!=null) nodo.setChild( ((Node)c).getChildren() );

                // DEFAULT CASE
                Node d_case = new Node();
                d_case.setTag("DEFAULT_CASE");
                d_case.setId(parser.cont++);
                parser.cont++;
                
                if (b!=null) d_case.setChild((Node)b);
                
                nodo.setChild(d_case);

                parser.father = nodo;
                RESULT = nodo;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_body",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // case_switch_list ::= case_switch case_switch_list 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("CASE_LIST");
                node.setId(parser.cont++);
                parser.cont++;

                node.setChild( (Node) c);

                if (cl!=null) node.setChild( ((Node)cl).getChildren() );

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_switch_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // case_switch_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_switch_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // case_switch ::= CASE PARIZQ value PARDER COLON BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Node node = new Node();
                node.setTag("CASE");
                node.setId(parser.cont);
                parser.cont++;

                node.setChild( (Node) v);    

                if(b!=null) node.setChild( (Node)b );  

                parser.father = node;
                RESULT = node;          
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_switch",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funCall_parameter ::= b_funCall_parameter funCall_parameter 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("FUNCTION_CALL_PARAMETERS");
                node.setId(parser.cont);
                parser.cont++;

                node.setChild( (Node)b);
                
                node.setChild( ((Node)fl).getChildren() );

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funCall_parameter",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funCall_parameter ::= value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("FUNCTION_CALL_PARAMETERS");
                node.setId(parser.cont);
                parser.cont++;

                node.setChild((Node)v);
        
                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funCall_parameter",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // b_funCall_parameter ::= value COMMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		      
                Node node = (Node)v;
                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b_funCall_parameter",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sign ::= SUM 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("SIGN");
                node.setValue((String)s);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sign ::= RES 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("SIGN");
                node.setValue((String)r);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sign ::= DIV 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("SIGN");
                node.setValue((String)d);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sign ::= MULT 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("SIGN");
                node.setValue((String)m);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sign ::= MOD 
            {
              Object RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("SIGN");
                node.setValue((String)mo);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // value ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("ID");
                node.setValue((String)id);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // value ::= BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("BOOLEAN");
                node.setValue((String)b);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // value ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("CHARACTER");
                node.setValue((String)c);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // value ::= EMPTY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("EMPTY");
                node.setValue((String)e);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // value ::= array_value 
            {
              Object RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("ARRAY");
                node.setValue(((Node)av).getValue());
                node.setId(parser.cont);
                parser.cont++;
                
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // value ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("NUMBER");
                node.setValue((String)i);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // array_value ::= SBRACKETIZQ b_array_value SBRACKETDER 
            {
              Object RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Node node = new Node();
                node.setValue("["+((Node)av).getValue()+"]");
                
                RESULT = node;
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_value",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // b_array_value ::= c_array_value b_array_value 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setValue( ((Node)c).getValue() + ((Node)b).getValue());

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b_array_value",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // b_array_value ::= value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setValue(((Node)v).getValue());

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b_array_value",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // c_array_value ::= value COMMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Node node = new Node();
                node.setValue( ((Node)v).getValue() + ", ");

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_array_value",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // for_parameter ::= ID ASSIGNMENT value TO value DELIMETER value 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                // NODO PADRE
                Node node = new Node();
                node.setTag("FOR_PARAMETER");
                node.setId(parser.cont);
                parser.cont++;

                // ASIGNMENT (NODO HIJO)
                Node assig = new Node();
                assig.setTag("ASSIGNMENT");
                assig.setId(parser.cont);
                parser.cont++;

                        // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue( (String) i);
                id.setId(parser.cont);
                parser.cont++;
                assig.setChild(id);

                        // ASSIGNMENT
                Node as_sign = new Node();
                as_sign.setTag("ASSIGNMENT");
                as_sign.setValue( (String) a);
                as_sign.setId(parser.cont);
                parser.cont++;
                assig.setChild(as_sign);

                        // VALUE
                assig.setChild( (Node) v1);

                node.setChild(assig);

                // TO
                Node to = new Node();
                to.setTag("TO");
                to.setValue((String)t);
                to.setId(parser.cont);
                parser.cont++;
                node.setChild(to);

                // VALUE 2
                node.setChild((Node)v2);

                // VALUE 3
                node.setChild((Node)v3);

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_parameter",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // forStatement ::= FOR PARIZQ for_parameter PARDER THEN BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                // for ( id = 0 to 10 | 1) then {}
                Node node = new Node();
                node.setTag("FOR_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                // FOR
                Node for_s = new Node();
                for_s.setTag("FOR");
                for_s.setValue( (String) f);
                for_s.setId(parser.cont);
                parser.cont++;
                node.setChild(for_s);

                // FOR_PARAMETERS
                node.setChild((Node)d);

                // THEN
                Node th = new Node();
                th.setTag("THEN");
                th.setValue( (String) t);
                th.setId(parser.cont);
                parser.cont++;
                node.setChild(th);

                // BODY
                if (b!=null) node.setChild( (Node) b );

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ifStatement ::= IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                // if () then {}
                Node node = new Node();
                node.setTag("IF_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                // IF
                Node if_s = new Node();
                if_s.setTag("IF");
                if_s.setValue( (String) i);
                if_s.setId(parser.cont);
                parser.cont++;
                node.setChild(if_s);

                // DESICION
                node.setChild((Node)d);

                // THEN
                Node th = new Node();
                th.setTag("THEN");
                th.setValue( (String) t);
                th.setId(parser.cont);
                parser.cont++;
                node.setChild(th);

                // BODY
                if (b!=null) node.setChild( (Node) b );

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ifStatement ::= IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER else_n 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                // if () then {} else {}
                Node node = new Node();
                node.setTag("IF_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                // IF
                Node if_s = new Node();
                if_s.setTag("IF");
                if_s.setValue( (String) i);
                if_s.setId(parser.cont);
                parser.cont++;
                node.setChild(if_s);

                // DESICION
                node.setChild((Node)d);

                // THEN
                Node th = new Node();
                th.setTag("THEN");
                th.setValue( (String) t);
                th.setId(parser.cont);
                parser.cont++;
                node.setChild(th);

                // BODY
                if (b!=null) node.setChild( (Node) b );

                // ELSE
                node.setChild( (Node) e);

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ifStatement ::= IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER elseIf 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                // if () then {} else if () then {}
                Node node = new Node();
                node.setTag("IF_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                // IF
                Node if_s = new Node();
                if_s.setTag("IF");
                if_s.setValue( (String) i);
                if_s.setId(parser.cont);
                parser.cont++;
                node.setChild(if_s);

                // DESICION
                node.setChild((Node)d);

                // THEN
                Node th = new Node();
                th.setTag("THEN");
                th.setValue( (String) t);
                th.setId(parser.cont);
                parser.cont++;
                node.setChild(th);

                // BODY
                if (b!=null) node.setChild( (Node) b );

                // ELSE IF
                node.setChild((Node)  ei);

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // else_n ::= ELSE BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Node node = new Node();
                node.setTag("ELSE");
                node.setId(parser.cont);
                parser.cont++;
                if (b!=null) node.setChild( (Node) b );

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_n",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // elseIf ::= ELSE ifStatement 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("ELSE_IF");
                node.setId(parser.cont);
                node.setChild( ((Node)i).getChildren() );
                parser.cont++;

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIf",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("TYPE");
                node.setValue((String)n);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= array_type 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("TYPE");
                node.setValue( ((Node)a).getValue() );
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("TYPE");
                node.setValue((String)b);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= CHARACTER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("TYPE");
                node.setValue((String)c);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // array_type ::= ARRAY SBRACKETIZQ type SBRACKETDER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Node node = new Node();
                node.setValue("array["+((Node)t).getValue()+"]");
                
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // return ::= COMEBACK PARIZQ value PARDER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Node node = new Node();
                node.setTag("RETURN_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                Node co = new Node();
                co.setTag("COMEBACK");
                co.setValue((String)c);
                co.setId(parser.cont);
                parser.cont++;

                node.setChild(co);

                node.setChild((Node)v);

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // desicion ::= value OPREL value 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("DECISION");
                node.setId(parser.cont);
                parser.cont++;

                node.setChild((Node)v1);
                
                Node op = new Node();
                op.setTag("RELATIONAL_OPERATOR");
                op.setValue((String)o);
                op.setId(parser.cont);
                parser.cont++;

                node.setChild(op);
                
                node.setChild((Node)v2);

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("desicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // desicion ::= value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      Node node = new Node();
                node.setTag("DECISION");
                node.setId(parser.cont);
                parser.cont++;

                node.setChild((Node)v);
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("desicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
