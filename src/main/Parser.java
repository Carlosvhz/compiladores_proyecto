
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\004\000\002\003" +
    "\012\000\002\010\004\000\002\010\002\000\002\007\013" +
    "\000\002\007\015\000\002\011\004\000\002\011\002\000" +
    "\002\012\005\000\002\012\006\000\002\004\004\000\002" +
    "\004\002\000\002\006\004\000\002\006\006\000\002\006" +
    "\005\000\002\006\006\000\002\006\007\000\002\006\006" +
    "\000\002\006\007\000\002\006\003\000\002\006\012\000" +
    "\002\006\003\000\002\006\003\000\002\014\004\000\002" +
    "\014\003\000\002\015\004\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\036\020\000\002\036\020\000\002\036\020\000\002\032" +
    "\012\000\002\032\016\000\002\032\013\000\002\034\004" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\006\000\002\043\004\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\037\011\000\002\040\010\000\002\041\013\000" +
    "\002\041\002\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\004\022\006\001\002\000\006\002\ufffd\022" +
    "\221\001\002\000\004\002\216\001\002\000\004\010\007" +
    "\001\002\000\004\044\010\001\002\000\004\043\011\001" +
    "\002\000\004\051\012\001\002\000\004\046\013\001\002" +
    "\000\032\011\021\014\032\016\017\017\020\024\026\025" +
    "\025\026\016\030\033\035\014\045\ufff5\052\023\054\034" +
    "\001\002\000\004\052\205\001\002\000\004\052\202\001" +
    "\002\000\014\042\uffd1\043\uffd1\046\uffd1\047\uffd1\052\uffd1" +
    "\001\002\000\004\044\173\001\002\000\004\044\145\001" +
    "\002\000\004\044\120\001\002\000\034\011\uffea\014\uffea" +
    "\016\uffea\017\uffea\023\uffea\024\uffea\025\uffea\026\uffea\030" +
    "\uffea\035\uffea\045\uffea\052\uffea\054\uffea\001\002\000\004" +
    "\051\113\001\002\000\004\045\112\001\002\000\014\042" +
    "\uffd2\043\uffd2\046\uffd2\047\uffd2\052\uffd2\001\002\000\014" +
    "\042\uffd4\043\uffd4\046\uffd4\047\uffd4\052\uffd4\001\002\000" +
    "\034\011\uffed\014\uffed\016\uffed\017\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\030\uffed\035\uffed\045\uffed\052\uffed\054" +
    "\uffed\001\002\000\034\011\uffeb\014\uffeb\016\uffeb\017\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb\035\uffeb\045" +
    "\uffeb\052\uffeb\054\uffeb\001\002\000\014\042\uffd3\043\uffd3" +
    "\046\uffd3\047\uffd3\052\uffd3\001\002\000\004\044\053\001" +
    "\002\000\004\044\042\001\002\000\004\050\037\001\002" +
    "\000\034\011\021\014\032\016\017\017\020\023\ufff5\024" +
    "\026\025\025\026\016\030\033\035\014\045\ufff5\052\023" +
    "\054\034\001\002\000\006\023\ufff6\045\ufff6\001\002\000" +
    "\012\024\026\025\025\026\016\054\034\001\002\000\004" +
    "\047\041\001\002\000\014\042\uffd0\043\uffd0\046\uffd0\047" +
    "\uffd0\052\uffd0\001\002\000\014\004\044\005\050\006\051" +
    "\007\047\052\043\001\002\000\040\011\uffe1\014\uffe1\016" +
    "\uffe1\017\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1" +
    "\035\uffe1\042\uffe1\043\uffe1\045\uffe1\052\uffe1\054\uffe1\001" +
    "\002\000\040\011\uffe0\014\uffe0\016\uffe0\017\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\030\uffe0\035\uffe0\042\uffe0\043" +
    "\uffe0\045\uffe0\052\uffe0\054\uffe0\001\002\000\040\011\uffdd" +
    "\014\uffdd\016\uffdd\017\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\030\uffdd\035\uffdd\042\uffdd\043\uffdd\045\uffdd\052\uffdd" +
    "\054\uffdd\001\002\000\004\043\052\001\002\000\040\011" +
    "\uffde\014\uffde\016\uffde\017\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\030\uffde\035\uffde\042\uffde\043\uffde\045\uffde\052" +
    "\uffde\054\uffde\001\002\000\040\011\uffdf\014\uffdf\016\uffdf" +
    "\017\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf\035" +
    "\uffdf\042\uffdf\043\uffdf\045\uffdf\052\uffdf\054\uffdf\001\002" +
    "\000\040\011\uffdc\014\uffdc\016\uffdc\017\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\030\uffdc\035\uffdc\042\uffdc\043\uffdc" +
    "\045\uffdc\052\uffdc\054\uffdc\001\002\000\034\011\uffef\014" +
    "\uffef\016\uffef\017\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\030\uffef\035\uffef\045\uffef\052\uffef\054\uffef\001\002\000" +
    "\004\052\054\001\002\000\004\051\055\001\002\000\006" +
    "\006\057\052\056\001\002\000\004\015\071\001\002\000" +
    "\004\015\060\001\002\000\004\006\061\001\002\000\004" +
    "\053\062\001\002\000\004\006\063\001\002\000\004\043" +
    "\064\001\002\000\004\012\065\001\002\000\004\046\066" +
    "\001\002\000\032\011\021\014\032\016\017\017\020\024" +
    "\026\025\025\026\016\030\033\035\014\045\ufff5\052\023" +
    "\054\034\001\002\000\004\045\070\001\002\000\034\011" +
    "\uffdb\014\uffdb\016\uffdb\017\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\030\uffdb\035\uffdb\045\uffdb\052\uffdb\054\uffdb\001" +
    "\002\000\006\006\073\052\072\001\002\000\004\053\103" +
    "\001\002\000\004\053\074\001\002\000\004\006\075\001" +
    "\002\000\004\043\076\001\002\000\004\012\077\001\002" +
    "\000\004\046\100\001\002\000\032\011\021\014\032\016" +
    "\017\017\020\024\026\025\025\026\016\030\033\035\014" +
    "\045\ufff5\052\023\054\034\001\002\000\004\045\102\001" +
    "\002\000\034\011\uffda\014\uffda\016\uffda\017\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\030\uffda\035\uffda\045\uffda\052" +
    "\uffda\054\uffda\001\002\000\004\006\104\001\002\000\004" +
    "\043\105\001\002\000\004\012\106\001\002\000\004\046" +
    "\107\001\002\000\032\011\021\014\032\016\017\017\020" +
    "\024\026\025\025\026\016\030\033\035\014\045\ufff5\052" +
    "\023\054\034\001\002\000\004\045\111\001\002\000\034" +
    "\011\uffd9\014\uffd9\016\uffd9\017\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\030\uffd9\035\uffd9\045\uffd9\052\uffd9\054\uffd9" +
    "\001\002\000\006\002\uffff\022\uffff\001\002\000\016\004" +
    "\044\005\050\006\051\007\047\027\114\052\043\001\002" +
    "\000\004\044\116\001\002\000\034\011\ufff2\014\ufff2\016" +
    "\ufff2\017\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\030\ufff2" +
    "\035\ufff2\045\ufff2\052\ufff2\054\ufff2\001\002\000\004\043" +
    "\117\001\002\000\034\011\uffee\014\uffee\016\uffee\017\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\030\uffee\035\uffee\045" +
    "\uffee\052\uffee\054\uffee\001\002\000\010\004\123\006\124" +
    "\052\121\001\002\000\006\031\140\043\uffcc\001\002\000" +
    "\004\043\125\001\002\000\004\043\uffce\001\002\000\004" +
    "\043\uffcd\001\002\000\004\012\126\001\002\000\004\046" +
    "\127\001\002\000\032\011\021\014\032\016\017\017\020" +
    "\024\026\025\025\026\016\030\033\035\014\045\ufff5\052" +
    "\023\054\034\001\002\000\004\045\131\001\002\000\036" +
    "\011\uffd8\013\132\014\uffd8\016\uffd8\017\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\030\uffd8\035\uffd8\045\uffd8\052\uffd8" +
    "\054\uffd8\001\002\000\006\011\021\046\134\001\002\000" +
    "\034\011\uffd6\014\uffd6\016\uffd6\017\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\030\uffd6\035\uffd6\045\uffd6\052\uffd6\054" +
    "\uffd6\001\002\000\032\011\021\014\032\016\017\017\020" +
    "\024\026\025\025\026\016\030\033\035\014\045\ufff5\052" +
    "\023\054\034\001\002\000\034\011\uffd5\014\uffd5\016\uffd5" +
    "\017\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\030\uffd5\035" +
    "\uffd5\045\uffd5\052\uffd5\054\uffd5\001\002\000\004\045\137" +
    "\001\002\000\034\011\uffd7\014\uffd7\016\uffd7\017\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\035\uffd7\045\uffd7" +
    "\052\uffd7\054\uffd7\001\002\000\012\004\142\005\143\006" +
    "\144\052\141\001\002\000\004\043\uffc8\001\002\000\004" +
    "\043\uffc9\001\002\000\004\043\uffca\001\002\000\004\043" +
    "\uffcb\001\002\000\004\052\146\001\002\000\004\043\147" +
    "\001\002\000\004\046\150\001\002\000\006\020\153\021" +
    "\uffc4\001\002\000\004\045\172\001\002\000\004\021\165" +
    "\001\002\000\004\044\154\001\002\000\014\004\044\005" +
    "\050\006\051\007\047\052\043\001\002\000\004\043\156" +
    "\001\002\000\004\041\157\001\002\000\004\046\160\001" +
    "\002\000\032\011\021\014\032\016\017\017\020\024\026" +
    "\025\025\026\016\030\033\035\014\045\ufff5\052\023\054" +
    "\034\001\002\000\004\045\162\001\002\000\006\020\153" +
    "\021\uffc4\001\002\000\004\021\uffc3\001\002\000\004\021" +
    "\uffc5\001\002\000\004\041\166\001\002\000\004\046\167" +
    "\001\002\000\032\011\021\014\032\016\017\017\020\024" +
    "\026\025\025\026\016\030\033\035\014\045\ufff5\052\023" +
    "\054\034\001\002\000\004\045\171\001\002\000\004\045" +
    "\uffc6\001\002\000\034\011\uffc7\014\uffc7\016\uffc7\017\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\030\uffc7\035\uffc7\045" +
    "\uffc7\052\uffc7\054\uffc7\001\002\000\010\004\123\006\124" +
    "\052\121\001\002\000\004\043\175\001\002\000\004\012" +
    "\176\001\002\000\004\046\177\001\002\000\032\011\021" +
    "\014\032\016\017\017\020\024\026\025\025\026\016\030" +
    "\033\035\014\045\ufff5\052\023\054\034\001\002\000\004" +
    "\045\201\001\002\000\034\011\uffec\014\uffec\016\uffec\017" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\030\uffec\035\uffec" +
    "\045\uffec\052\uffec\054\uffec\001\002\000\036\011\ufff4\014" +
    "\ufff4\016\ufff4\017\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\030\ufff4\035\ufff4\045\ufff4\051\203\052\ufff4\054\ufff4\001" +
    "\002\000\014\004\044\005\050\006\051\007\047\052\043" +
    "\001\002\000\034\011\ufff3\014\ufff3\016\ufff3\017\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\030\ufff3\035\ufff3\045\ufff3" +
    "\052\ufff3\054\ufff3\001\002\000\004\044\206\001\002\000" +
    "\016\004\044\005\050\006\051\007\047\043\211\052\043" +
    "\001\002\000\004\043\215\001\002\000\014\004\044\005" +
    "\050\006\051\007\047\052\043\001\002\000\034\011\ufff1" +
    "\014\ufff1\016\ufff1\017\ufff1\023\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\030\ufff1\035\ufff1\045\ufff1\052\ufff1\054\ufff1\001\002" +
    "\000\006\042\213\043\uffe8\001\002\000\014\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\052\uffe7\001\002\000\004\043\uffe9" +
    "\001\002\000\034\011\ufff0\014\ufff0\016\ufff0\017\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\030\ufff0\035\ufff0\045\ufff0" +
    "\052\ufff0\054\ufff0\001\002\000\004\002\001\001\002\000" +
    "\006\002\ufffd\022\221\001\002\000\004\002\000\001\002" +
    "\000\004\052\222\001\002\000\004\044\223\001\002\000" +
    "\006\043\ufff9\052\224\001\002\000\004\041\244\001\002" +
    "\000\006\043\ufff9\052\224\001\002\000\004\043\227\001" +
    "\002\000\004\051\230\001\002\000\014\024\026\025\025" +
    "\026\016\046\231\054\034\001\002\000\032\011\021\014" +
    "\032\016\017\017\020\024\026\025\025\026\016\030\033" +
    "\035\014\045\ufff5\052\023\054\034\001\002\000\004\046" +
    "\233\001\002\000\032\011\021\014\032\016\017\017\020" +
    "\023\ufff5\024\026\025\025\026\016\030\033\035\014\052" +
    "\023\054\034\001\002\000\004\023\236\001\002\000\004" +
    "\045\240\001\002\000\014\004\044\005\050\006\051\007" +
    "\047\052\043\001\002\000\004\045\uffcf\001\002\000\006" +
    "\002\ufffb\022\ufffb\001\002\000\004\045\242\001\002\000" +
    "\006\002\ufffc\022\ufffc\001\002\000\004\043\ufffa\001\002" +
    "\000\012\024\026\025\025\026\016\054\034\001\002\000" +
    "\010\042\246\043\ufff8\052\ufff8\001\002\000\006\043\ufff7" +
    "\052\ufff7\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\006\002\004\003\003\001\001\000\006\007" +
    "\216\010\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\023\006\034\016\014\017\030" +
    "\032\026\036\027\037\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\035\006\034\016\014\017\030\032\026\036\027\037" +
    "\021\001\001\000\002\001\001\000\006\016\037\017\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\045\030\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\066\006\034\016\014\017\030" +
    "\032\026\036\027\037\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\100\006\034\016\014" +
    "\017\030\032\026\036\027\037\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\107\006" +
    "\034\016\014\017\030\032\026\036\027\037\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\114\030\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\127\006\034\016\014\017\030\032\026" +
    "\036\027\037\021\001\001\000\002\001\001\000\004\034" +
    "\132\001\001\000\004\032\134\001\001\000\002\001\001" +
    "\000\020\004\135\006\034\016\014\017\030\032\026\036" +
    "\027\037\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\150\041\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\154\030\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\160\006\034\016\014\017\030\032\026\036\027\037" +
    "\021\001\001\000\002\001\001\000\006\041\162\042\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\167\006\034\016\014" +
    "\017\030\032\026\036\027\037\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\177\006\034\016\014\017\030\032\026" +
    "\036\027\037\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\203\030\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\206\015" +
    "\207\023\211\030\044\001\001\000\002\001\001\000\012" +
    "\014\213\015\207\023\211\030\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\216\010" +
    "\246\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\225\012\224\001\001\000\002\001" +
    "\001\000\006\011\242\012\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\231\017\030\001\001\000" +
    "\020\004\240\006\034\016\014\017\030\032\026\036\027" +
    "\037\021\001\001\000\002\001\001\000\020\004\233\006" +
    "\034\016\014\017\030\032\026\036\027\037\021\001\001" +
    "\000\004\043\234\001\001\000\002\001\001\000\006\023" +
    "\236\030\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\244\017\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Node father;
    public int cont = 0;
    public static int errores = 0;

    public void syntax_error(Symbol s){ 
       System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
       System.out.println("Sintaxis truena");
    } 

    /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("CUP detecto un error de syntaxis en " + s.left + " column " + s.right);
    } */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= main function_list 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      // CURRENT NODE
                Node node = new Node();
                node.setTag("INIT");
                node.setId(parser.cont);  
                parser.cont++;
                
                // MAIN
                node.setChild( (Node) m );

                // FUNCTION_LIST
                if(fl!=null) node.setChild((Node)fl);

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= FUNCTION MAIN PARIZQ PARDER ASSIGNMENT BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		      // CURRENT NODE
                Node node = new Node();
                node.setTag("MAIN");
                node.setId(parser.cont);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setId(parser.cont);
                id.setValue((String) m);
                node.setChild(id);

                // BODY
                if (b!=null) node.setChild( (Node) b );
                

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // function_list ::= function function_list 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
                // CURRENT NODE
                Node node = new Node();
                node.setTag("FUNCTION_LIST");
                node.setId(parser.cont);
                parser.cont++;

                // FUNCTION
                node.setChild((Node)f);

                if(fl!=null){
                        node.setChild( ((Node)fl).getChildren() );                      
                }
                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function_list ::= 
            {
              Object RESULT =null;
		

        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function ::= FUNCTION ID PARIZQ parameter PARDER ASSIGNMENT BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		      // CURRENT NODE
                Node node = new Node();
                node.setTag("FUNCTION");
                node.setId(parser.cont);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setId(parser.cont);
                parser.cont++;
                id.setValue( (String) i);
                node.setChild(id);

                // PARAMETER
                if (p!=null) node.setChild( (Node) p );
                
                // BODY
                if (b!=null) node.setChild( (Node) b );
                
                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function ::= FUNCTION ID PARIZQ parameter PARDER ASSIGNMENT type BRACKETIZQ body return BRACKETDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                // CURRENT NODE
                Node node = new Node();
                node.setTag("FUNCTION_WITH_RETURN");
                node.setId(parser.cont);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setId(parser.cont);
                parser.cont++;
                id.setValue( (String) i);
                node.setChild(id);
                
                // PARAMETER
                // if (p!=null) node.setChild( (Node) p );
                
                // RETURN TYPE
                // node.setChild( (Node) t );

                // BODY
                if (b!=null) node.setChild( (Node) b );

                // RETURN
                // node.setChild( (Node) r);

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parameter ::= b_parameter parameter 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                // PROPOSITION
                Node node = new Node();
                node.setTag("PARAMETER_LIST");
                node.setId(parser.cont);
                parser.cont++;

                // PROPOSITION
                node.setChild( (Node) b );
        
                if(p!=null) node.setChild( ((Node)p).getChildren() );

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameter ::= 
            {
              Object RESULT =null;
		/*vacío*/
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // b_parameter ::= ID COLON type 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("PARAMETER");
                node.setId(parser.cont++);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue( (String) i);
                id.setId(parser.cont++);
                parser.cont++;
                
                node.setChild(id);

                // TYPE
                node.setChild( (Node)t);

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b_parameter",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // b_parameter ::= ID COLON type COMMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Node node = new Node();
                node.setTag("PARAMETER");
                node.setId(parser.cont++);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue( (String) i);
                id.setId(parser.cont++);
                parser.cont++;
                
                node.setChild(id);

                // TYPE
                node.setChild( (Node)t);

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b_parameter",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // body ::= proposition body 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                // PROPOSITION
                Node node = new Node();
                node.setTag("BODY");
                node.setId(parser.cont);
                parser.cont++;

                // PROPOSITION
                node.setChild( (Node) p );
                
                if(b!=null){
                        node.setChild( ((Node)b).getChildren() );
                }
                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // body ::= 
            {
              Object RESULT =null;
		/*Vacío*/
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proposition ::= type ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
                // TYPE ID
                Node node = new Node();
                node.setTag("SIMPLE_DECLARATION");
                node.setId(parser.cont);
                parser.cont++;

                // TYPE
                node.setChild( (Node) t);

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue((String)i);
                id.setId(parser.cont);
                parser.cont++;

                node.setChild(id);

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // proposition ::= type ID ASSIGNMENT value 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                // TYPE ID = VALUE
                Node node = new Node();
                node.setTag("DECLARATION_ASSIGNATION");
                node.setId(parser.cont);
                parser.cont++;

                // TYPE
                node.setChild( (Node) t);

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue( (String) i);
                id.setId(parser.cont);
                parser.cont++;
                node.setChild(id);

                // ASSIGNMENT
                Node as = new Node();
                as.setTag("ASSIGNMENT");
                as.setValue( (String) a);
                as.setId(parser.cont);
                parser.cont++;
                node.setChild(as);

                // VALUE
                node.setChild( (Node) v);

                parser.father = node;
                RESULT = node;     
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // proposition ::= ID ASSIGNMENT value 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                // ID = VALUE
                Node node = new Node();
                node.setTag("ASSIGNMENT");
                node.setId(parser.cont);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue( (String) i);
                id.setId(parser.cont);
                node.setChild(id);

                // ASSIGNMENT
                Node as = new Node();
                as.setTag("ASSIGNMENT");
                as.setValue( (String) a);
                as.setId(parser.cont);
                parser.cont++;
                node.setChild(as);

                // VALUE
                node.setChild( (Node) v);

                parser.father = node;
                RESULT = node;   
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // proposition ::= CALL ID PARIZQ PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                // CALL FUNCTION()
                Node node = new Node();
                node.setTag("FUNCTION_CALL");
                node.setId(parser.cont);
                parser.cont++;

                // CALL
                Node call = new Node();
                call.setTag("CALL");
                call.setId(parser.cont);
                parser.cont++;
                node.setChild(call);

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue((String)i);
                id.setId(parser.cont);
                parser.cont++;
                node.setChild(id);

                parser.father = node;
                RESULT = node;   
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // proposition ::= CALL ID PARIZQ funCall_parameter PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                // CALL FUNCTION( VALUE, VALUE2, VALUE3 )
                Node node = new Node();
                node.setTag("FUNCTION_CALL");
                node.setId(parser.cont);
                parser.cont++;

                // CALL
                Node call = new Node();
                call.setTag("CALL");
                call.setId(parser.cont);
                parser.cont++;
                node.setChild(call);

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setValue((String)i);
                id.setId(parser.cont);
                parser.cont++;
                node.setChild(id);

                // PARAMETERS
                node.setChild( (Node) f);
                
                parser.father = node;
                RESULT = node; 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // proposition ::= OUTPUT PARIZQ value PARDER 
            {
              Object RESULT =null;
		int ouleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ouright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ou = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		      
                // output(ID)
                Node node = new Node();
                node.setTag("OUTPUT_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                // OUTPUT
                Node output = new Node();
                output.setTag("OUTPUT");
                output.setValue( (String) ou);
                output.setId(parser.cont);
                parser.cont++;
                node.setChild(output);

                // VALUE
                node.setChild((Node)v);

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // proposition ::= ID ASSIGNMENT INPUT PARIZQ PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ip = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                // id = input()
                Node node = new Node();
                node.setTag("INPUT_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                // ID
                Node id = new Node();
                id.setTag("ID");
                id.setId(parser.cont);
                id.setValue( (String) i);
                parser.cont++;
                node.setChild(id);

                // ASSIGNMENT
                Node assignment = new Node();
                assignment.setTag("ASSIGNMENT");
                assignment.setValue( (String) a);
                assignment.setId(parser.cont);
                parser.cont++;
                node.setChild(assignment);

                // INPUT
                Node input = new Node();
                input.setTag("INPUT");
                input.setValue( (String) ip);
                input.setId(parser.cont);
                parser.cont++;
                node.setChild(input);

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // proposition ::= ifStatement 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = (Node)i;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // proposition ::= WHILE PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                // while () then {}
                Node node = new Node();
                node.setTag("WHILE_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                // WHILE
                Node wh_s = new Node();
                wh_s.setTag("WHILE");
                wh_s.setValue( (String) w);
                wh_s.setId(parser.cont);
                parser.cont++;
                node.setChild(wh_s);

                // DESICION
                // node.setChild((Node)d);

                // THEN
                Node th = new Node();
                th.setTag("THEN");
                th.setValue( (String) t);
                th.setId(parser.cont);
                parser.cont++;
                node.setChild(th);

                // BODY
                if (b!=null) node.setChild( (Node) b );

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // proposition ::= forStatement 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = (Node)f;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // proposition ::= switchStatement 
            {
              Object RESULT =null;
		      
                Node node = new Node();
                node.setTag("SWTICH");
                node.setId(parser.cont);
                parser.cont++;

                // SIMPLE_DECLARATION
                // node.setChild( (Node) sp);
                node.setChild(new Node(":V"));

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proposition",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funCall_parameter ::= b_funCall_parameter funCall_parameter 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("FUNCTION_CALL_PARAMETERS");
                node.setId(parser.cont);
                parser.cont++;

                node.setChild( (Node)b);
                
                node.setChild( ((Node)fl).getChildren() );

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funCall_parameter",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funCall_parameter ::= value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("FUNCTION_CALL_PARAMETERS");
                node.setId(parser.cont);
                parser.cont++;

                node.setChild((Node)v);
        
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funCall_parameter",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // b_funCall_parameter ::= value COMMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		      
                RESULT = (Node) v;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b_funCall_parameter",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // signo ::= SUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // signo ::= RES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // signo ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // signo ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // signo ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("signo",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // value ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("VALUE");
                node.setValue((String)id);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // value ::= BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("VALUE");
                node.setValue((String)b);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // value ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("VALUE");
                node.setValue((String)c);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // value ::= EMPTY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("VALUE");
                node.setValue((String)e);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // value ::= array_value 
            {
              Object RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // value ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("VALUE");
                node.setValue((String)i);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // forStatement ::= FOR PARIZQ ID ASSIGNMENT INT TO INT DELIMETER INT PARDER THEN BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                // for ( id = 0 to 10 | 1) then {}
                Node node = new Node();
                node.setTag("FOR_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                // FOR
                Node for_s = new Node();
                for_s.setTag("FOR");
                for_s.setValue( (String) f);
                for_s.setId(parser.cont);
                parser.cont++;
                node.setChild(for_s);

                // FOR_PARAMETERS
                // node.setChild((Node)d);

                // THEN
                Node th = new Node();
                th.setTag("THEN");
                th.setValue( (String) t);
                th.setId(parser.cont);
                parser.cont++;
                node.setChild(th);

                // BODY
                if (b!=null) node.setChild( (Node) b );

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // forStatement ::= FOR PARIZQ ID ASSIGNMENT ID TO INT DELIMETER INT PARDER THEN BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                // for ( id = id to 10 | 1) then {}
                Node node = new Node();
                node.setTag("FOR_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                // FOR
                Node for_s = new Node();
                for_s.setTag("FOR");
                for_s.setValue( (String) f);
                for_s.setId(parser.cont);
                parser.cont++;
                node.setChild(for_s);

                // FOR_PARAMETERS
                // node.setChild((Node)d);

                // THEN
                Node th = new Node();
                th.setTag("THEN");
                th.setValue( (String) t);
                th.setId(parser.cont);
                parser.cont++;
                node.setChild(th);

                // BODY
                if (b!=null) node.setChild( (Node) b );

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // forStatement ::= FOR PARIZQ ID ASSIGNMENT ID TO ID DELIMETER INT PARDER THEN BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                // for ( id = id to id | 1) then {}
                Node node = new Node();
                node.setTag("FOR_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                // FOR
                Node for_s = new Node();
                for_s.setTag("FOR");
                for_s.setValue( (String) f);
                for_s.setId(parser.cont);
                parser.cont++;
                node.setChild(for_s);

                // FOR_PARAMETERS
                // node.setChild((Node)d);

                // THEN
                Node th = new Node();
                th.setTag("THEN");
                th.setValue( (String) t);
                th.setId(parser.cont);
                parser.cont++;
                node.setChild(th);

                // BODY
                if (b!=null) node.setChild( (Node) b );

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ifStatement ::= IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                // if () then {}
                Node node = new Node();
                node.setTag("IF_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                // IF
                Node if_s = new Node();
                if_s.setTag("IF");
                if_s.setValue( (String) i);
                if_s.setId(parser.cont);
                parser.cont++;
                node.setChild(if_s);

                // DESICION
                // node.setChild((Node)d);

                // THEN
                Node th = new Node();
                th.setTag("THEN");
                th.setValue( (String) t);
                th.setId(parser.cont);
                parser.cont++;
                node.setChild(th);

                // BODY
                if (b!=null) node.setChild( (Node) b );

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ifStatement ::= IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER ELSE BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object bo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                // if () then {} else {}
                Node node = new Node();
                node.setTag("IF_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                // IF
                Node if_s = new Node();
                if_s.setTag("IF");
                if_s.setValue( (String) i);
                if_s.setId(parser.cont);
                parser.cont++;
                node.setChild(if_s);

                // DESICION
                // node.setChild((Node)d);

                // THEN
                Node th = new Node();
                th.setTag("THEN");
                th.setValue( (String) t);
                th.setId(parser.cont);
                parser.cont++;
                node.setChild(th);

                // BODY
                if (b!=null) node.setChild( (Node) b );

                // ELSE
                Node es = new Node();
                es.setTag("ELSE");
                es.setValue( (String) e);
                es.setId(parser.cont);
                parser.cont++;
                node.setChild(es);

                if (bo!=null) node.setChild( (Node) bo );

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ifStatement ::= IF PARIZQ desicion PARDER THEN BRACKETIZQ body BRACKETDER elseIf 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                // if () then {} else if () then {}
                Node node = new Node();
                node.setTag("IF_STATEMENT");
                node.setId(parser.cont);
                parser.cont++;

                // IF
                Node if_s = new Node();
                if_s.setTag("IF");
                if_s.setValue( (String) i);
                if_s.setId(parser.cont);
                parser.cont++;
                node.setChild(if_s);

                // DESICION
                // node.setChild((Node)d);

                // THEN
                Node th = new Node();
                th.setTag("THEN");
                th.setValue( (String) t);
                th.setId(parser.cont);
                parser.cont++;
                node.setChild(th);

                // BODY
                if (b!=null) node.setChild( (Node) b );

                // ELSE IF
                node.setChild((Node)  ei);

                parser.father = node;
                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStatement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elseIf ::= ELSE ifStatement 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("ELSE_IF");
                node.setId(parser.cont);
                node.setChild( ((Node)i).getChildren() );
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIf",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("TYPE");
                node.setValue((String)n);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= array_type 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("TYPE");
                node.setValue((String)b);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type ::= CHARACTER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Node node = new Node();
                node.setTag("TYPE");
                node.setValue((String)c);
                node.setId(parser.cont);
                parser.cont++;

                RESULT = node;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // array_type ::= ARRAY SBRACKETIZQ type SBRACKETDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // return ::= COMEBACK value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // desicion ::= BOOL 
            {
              Object RESULT =null;
		

        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("desicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // desicion ::= INT 
            {
              Object RESULT =null;
		
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("desicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // desicion ::= ID 
            {
              Object RESULT =null;
		
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("desicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // desicion ::= ID OPREL INT 
            {
              Object RESULT =null;
		
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("desicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // desicion ::= ID OPREL CHAR 
            {
              Object RESULT =null;
		
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("desicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // desicion ::= ID OPREL BOOL 
            {
              Object RESULT =null;
		
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("desicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // desicion ::= ID OPREL ID 
            {
              Object RESULT =null;
		
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("desicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // switchStatement ::= SWITCH PARIZQ ID PARDER BRACKETIZQ switch_body BRACKETDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switchStatement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // switch_body ::= case_switch DEFAULT COLON BRACKETIZQ body BRACKETDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // case_switch ::= CASE PARIZQ value PARDER COLON BRACKETIZQ body BRACKETDER b_case_switch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_switch",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // case_switch ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_switch",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // b_case_switch ::= case_switch 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b_case_switch",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
